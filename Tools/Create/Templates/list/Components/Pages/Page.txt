@page "/$uri$"
@page "/$uri$/{page:int}"
@namespace WebApp.Components.Pages
@using WebApp.Components.Parts
@using WebApp.Models
@using WebApp.Repositories.Interfaces
@inherits Base.PageBase
@inject ILogger<$ClassName$> Logger
@inject I$ReposiotryName$Repository repository
@inject NavigationManager Navigation

@if (IsBeforeLoginCheck)
{
    // ログイン確認前は表示なし
    return;
}

<PageTitle>$Title$</PageTitle>

<h1>$Title$</h1>

@if (PageRecords == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row page-header">
        <div class="col">
            <button @onclick="@(() => ToEdit())" class="btn btn-outline-success">新規作成</button>
        </div>
    </div>

    @* 検索条件 *@
    <EditForm method="post" Model="InputModel" OnSubmit="Search" id="search">
        <div class="card col-md-8 offset-md-2 mb-5">
            <div class="card-body">

                @* 検索条件 実装例 *@
                @*
                <div class="row row-margin">
                    <div class="col">
                        <label class="" for="SerchProductName">製品名(あいまい検索)</label>
                        <InputText class="col-md-6" id="SerchProductName" @bind-Value="InputModel!.ProductName" />
                    </div>
                </div>

                <div class="row row-margin">
                    <div class="col">
                        <label class="col-md-4" for="StartUnitPrice">単価</label>
                        <InputNumber class="col-md-4 text-end" id="StartUnitPrice" @bind-Value="InputModel!.StartUnitPrice" />
                    </div>
                    <div class="col">
                        <label class="col-md-4" for="EndUnitPrice">〜</label>
                        <InputNumber class="col-md-4 text-end" id="EndUnitPrice" @bind-Value="InputModel!.EndUnitPrice" />
                    </div>
                </div>

                <div class="row row-margin">
                    <div class="col">
                        <label class="col-md-4" for="StartTotalPrice">合計金額</label>
                        <InputNumber class="col-md-4 text-end" id="StartTotalPrice" @bind-Value="Model!.StartTotalPrice" />
                    </div>
                    <div class="col">
                        <label class="col-md-4" for="EndTotalPrice">〜</label>
                        <InputNumber class="col-md-4 text-end" id="EndTotalPrice" @bind-Value="Model!.EndTotalPrice" />
                    </div>
                </div>
                *@

            </div>
            <button type="submit" form="search" class="btn btn-outline-success">検索</button>
        </div>
    </EditForm>

    <Pagination PageName="/$uri$" CurrentPageNumber="@Page" TotalRecords="@TotalRecords" RecordsPerPage="@PageCount" />

    @* 一覧 *@
    <table class="table">
        @* 検索条件 実装例 *@
        @*
        <thead>
            <tr>
                <th style="width:2rem">No</th>
                <th style="min-width:15rem">ProductName</th>
                <th style="width:5rem">UnitPrice</th>
                <th style="width:3rem">Qty</th>
                <th style="width:9rem">TotalPrice</th>
                <th>編集</th>
            </tr>
        </thead>
        <tbody>
            @if(TotalRecords > 0) {
                @foreach (var pageRecord in PageRecords)
                {
                    <tr>
                        <td class="text-end">@pageRecord.No</td>
                        <td>@pageRecord.Key</td>
                        <td class="text-end">@(pageRecord.UnitPrice.ToString("#,#"))</td>
                        <td class="text-end">@(pageRecord.Qty.ToString("#,#"))</td>
                        <td class="text-end">@(pageRecord.TotalPrice.ToString("#,#"))</td>
                        <td><button @onclick="@(() => ToEdit(pageRecord.Key))" class="btn btn-outline-success">編集</button></td>
                    </tr>
                }
            }
        </tbody>
        *@
    </table>
}

@code {
    /// <summary>
    /// セッション定数：検索条件
    /// </summary>
    public const string SessionSearch = "Session$ClassName$Search"; 

    /// <summary>
    /// InputタグのEnterKeyを無効に設定したか？
    /// </summary>
    private bool DisabledEnterKey = false;

    /// <summary>
    /// 入力条件
    /// </summary>
    private Input$ClassName$Model InputModel { get; set; } = new();

    /// <summary>
    /// 検索条件
    /// </summary>
    private Input$ClassName$Model Model { get; set; } = new();

    #region ページング用
    /// <summary>
    /// ページング用：現在のページ数
    /// </summary>
    [Parameter]
    public int Page { get; set; }

    /// <summary>
    /// ページング用：総レコード数
    /// </summary>
    public int TotalRecords { get; set; }

    /// <summary>
    /// 定数：ページング用：1ページのレコード数
    /// </summary>
    private const int PageCount = 10;

    /// <summary>
    /// 1ページの表示レコード
    /// </summary>
    private $ClassName$Model[]? PageRecords;

    /// <summary>
    /// ページ変更イベント
    /// </summary>
    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        DisabledEnterKey = false;

        // 入力条件と検索条件が不一致の場合
        if (InputModel != Model)
        {
            // 入力情報を検索条件で上書き
            InputModel = Model.Copy();
        }

        // 検索結果を取得
        ShowPage(Page);
    }

    /// <summary>
    /// 指定ページのレコード表示
    /// </summary>
    /// <param name="pageIndex">指定ページ(1ベース)</param>
    /// <param name="isRefreshTotalRecords">総レコード数を更新するか否か</param>
    private void ShowPage(int pageIndex, bool isRefreshTotalRecords = false)
    {
        // ページ数がマイナスの場合は終了
        if (pageIndex <= 0)
            return;

        if (isRefreshTotalRecords)
        {
            // 総レコード数更新
            TotalRecords = repository.GetTotalRecord(Model);
        }

        // ゼロベースのページ数を設定
        var zeroBasePageIndex = pageIndex - 1;

        // DBから1ページ分のレコード取得
        PageRecords = repository.GetList(Model, zeroBasePageIndex * PageCount,  PageCount);
        StateHasChanged();
    }
    #endregion

    /// <summary>
    /// 初期処理
    /// </summary>
    /// <param name="firstRender">初回表示か否か</param>
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var oldPage = Page;
        if (firstRender)
        {
            try
            {
                Logger.LogInformation(await GetLogMessage("開始"));

                // 未ログインの場合は即時終了
                if (!await LoginCheck())
                {
                    Logger.LogInformation(await GetLogMessage("ログインチェック失敗"));
                    return;
                }

                // ログイン確認完了
                IsBeforeLoginCheck = false;
                StateHasChanged();

                Logger.LogInformation(await GetLogMessage("ログインチェック成功"));

                // ページ指定なしの場合は1ページ
                if (Page == 0)
                {
                    Page = 1;
                }

                // 検索条件の復元
                var tempModel = await GetAsync<Input$ClassName$Model>(SessionSearch);
                if (tempModel is not null) 
                    InputModel = tempModel;

                // 検索条件に入力条件を設定
                Model = InputModel.Copy();

                // 検索結果を取得(総レコード数更新)
                ShowPage(Page, true);

                Logger.LogInformation(await GetLogMessage($"検索結果:{repository.GetTotalRecord(Model)}件"));
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, await GetLogError(ex));
                GotoErrorPage();
            }
            finally
            {
                Logger.LogInformation(await GetLogMessage("終了"));
            }
        }

        // IntputタグのEnterKey無効が実施されていない場合は設定
        if (Page > 0 && !DisabledEnterKey)
        {
            // 「入力項目でエンターキー押すと誤送信」を無効化
            await DisableEnterKey();
            DisabledEnterKey = true;
        }

        // メニューから遷移した場合
        if (oldPage <= 0)
        {
            DisabledEnterKey = false;
            // 遷移情報削除
            await DeleteAsync(SessionSearch);
            InputModel = new();
            Model = new();
            TotalRecords = repository.GetTotalRecord(Model);
            Navigation.NavigateTo("/$uri$/1");
        }
    }

    /// <summary>
    /// 検索イベント
    /// </summary>
    private async Task Search()
    {
        // 1ページ
        Page = 1;

        // 検索条件の保存
        await SetAsync(SessionSearch, InputModel);

        // 検索条件に入力条件を設定
        Model = InputModel.Copy();

        // 検索結果を取得(総レコード数更新)
        ShowPage(Page, true);
        Navigation.NavigateTo("/$uri$/1");
    }

    /// <summary>
    /// 新規・編集
    /// </summary>
    /// <param name="key">主キー</param>
    private async Task ToEdit($EditKeyType$? key = null)
    {
        // HACK 編集ページURL
        var editPageUrl = "order-edit";

        // 画面遷移
        if (key is null)
            await GotoPageAsync($"/{editPageUrl}");
        else        
            await GotoPageAsync($"/{editPageUrl}/{key}");
    }

}
