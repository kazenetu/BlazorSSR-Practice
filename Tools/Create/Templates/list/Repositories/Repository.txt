using System.Data;
using System.Runtime.CompilerServices;
using System.Text;
using Microsoft.Extensions.Options;
using WebApp.DBAccess;
using WebApp.Models;
using WebApp.Repositories.Interfaces;

namespace WebApp.Repositories;

public class $ClassName$Repository : RepositoryBase, I$ClassName$Repository
{
    /// <summary>
    /// コンストラクタ
    /// </summary>
    public $ClassName$Repository(IOptions<DatabaseConfigModel> config) : base(config)
    {
    }

    /// <summary>
    /// レコード数を返す
    /// </summary>
    /// <param name="inputModel">検索条件</param>
    /// <returns>対象レコード数</returns>
    public int GetTotalRecord(Input$ClassName$Model inputModel)
    {
        var result = 0;

        // パラメータ初期化
        db!.ClearParam();

        var sql = new StringBuilder();

        // TODO 発行SQL作成
        // sql.AppendLine("SELECT count(productName) AS cnt FROM t_order");
        sql.Append(GetWhere(inputModel));

        // SQL発行
        //var sqlResult = db.Fill(sql.ToString());
        var sqlResult = new DataTable(); // HACK SQL完成時に削除。上の行のコメントアウトを解除すること
        foreach (DataRow row in sqlResult.Rows)
        {
            result = Parse<int>(row["cnt"]);
            break;
        }

        return result;
    }

    /// <summary>
    /// 対象レコード配列を返す
    /// </summary>
    /// <param name="inputModel">検索条件</param>
    /// <param name="startIndex">取得開始レコードインデックス</param>
    /// <param name="recordCount">取得レコード数</param>
    /// <returns>指定範囲のレコード配列</returns>
    public $ClassName$Model[] GetList(Input$ClassName$Model inputModel, int startIndex, int recordCount)
    {
        var result = new List<$ClassName$Model>();

        // パラメータ初期化
        db!.ClearParam();

        var sql = new StringBuilder();

        // TODO 発行SQL作成
        // sql.AppendLine("SELECT productName, unitPrice, qty,unitPrice*qty AS totalPrice FROM t_order");
        // sql.Append(GetWhere(inputModel));
        // sql.AppendLine("ORDER BY productName");
        sql.AppendLine(db!.GetLimitSQL(recordCount, startIndex));

        // SQL発行
        //var sqlResult = db.Fill(sql.ToString());
        var sqlResult = new DataTable(); // HACK SQL完成時に削除。上の行のコメントアウトを解除すること
        var noIndex = 1;
        foreach (DataRow row in sqlResult.Rows)
        {
            // TODO モデルに変換、追加
            // var no = startIndex + noIndex;
            // var key = Parse<$EditKeyType$>(row["productName"]);
            // var unitPrice = Parse<decimal>(row["unitPrice"]);
            // var qty = Parse<decimal>(row["qty"]);
            // var totalPrice = unitPrice * qty;
            // result.Add(new $ClassName$Model(key, no, unitPrice, qty, totalPrice, 1));
        }
        return [.. result];
    }

    /// <summary>
    /// 検索条件を取得
    /// </summary>
    /// <param name="inputModel"></param>
    /// <returns></returns>
    private string GetWhere(Input$ClassName$Model inputModel)
    {
        if(db is null) return string.Empty;

        var where = new StringBuilder();

        // TODO 条件の確認と追加
        // if(!string.IsNullOrEmpty(inputModel.ProductName))
        // {
        //     if (where.Length > 0) where.Append(" AND ");
        //     where.AppendLine(" productName like @ProductName");

        //     // Param設定
        //     db.AddParam("@ProductName", $"%{inputModel.ProductName}%");
        // }
        // if(inputModel.StartUnitPrice is not null)
        // {
        //     if (where.Length > 0) where.Append(" AND ");
        //     where.AppendLine(" unitPrice >= @StartUnitPrice");

        //     // Param設定
        //     db.AddParam("@StartUnitPrice", inputModel.StartUnitPrice);
        // }
        // if(inputModel.EndUnitPrice is not null)
        // {
        //     if (where.Length > 0) where.Append(" AND ");
        //     where.AppendLine(" unitPrice <= @EndUnitPrice");

        //     // Param設定
        //     db.AddParam("@EndUnitPrice", inputModel.EndUnitPrice);
        // }
        // if(inputModel.StartTotalPrice is not null)
        // {
        //     if (where.Length > 0) where.Append(" AND ");
        //     where.AppendLine(" cast(unitPrice*qty AS numeric) >= @StartTotalPrice");

        //     // Param設定
        //     db.AddParam("@StartTotalPrice", inputModel.StartTotalPrice);
        // }
        // if(inputModel.EndTotalPrice is not null)
        // {
        //     if (where.Length > 0) where.Append(" AND ");
        //     where.AppendLine(" cast(unitPrice*qty AS numeric) <= @EndTotalPrice");

        //     // Param設定
        //     db.AddParam("@EndTotalPrice", inputModel.EndTotalPrice);
        // }

        // 条件が存在する場合は条件句を返す
        if (where.Length > 0) return " WHERE " + where.ToString();

        return string.Empty;
    }
}
