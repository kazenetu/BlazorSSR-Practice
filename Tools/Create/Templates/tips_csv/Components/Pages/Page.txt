@page "/$uri$"
@namespace WebApp.Components.Pages
@inherits Base.PageBase
@using PdfReport;
@using PdfReport.Interfaces;
@using PdfReport.DataLists;
@using System.Text
@using WebApp.Components.Parts
@using WebApp.Models
@using WebApp.Models.Parts
@using WebApp.Repositories.Interfaces
@inject ILogger<$ClassName$> Logger
@inject I$ClassName$Repository repository

@if (IsBeforeLoginCheck)
{
    // ログイン確認前は表示なし
    return;
}

<PageTitle>$ClassName$</PageTitle>

<h1>$ClassName$</h1>

@* CSVパーツ実装例 *@
<FileDownload ButtonName="CSVダウンロード" GetDataFunction="DownLoadCSV" />


@code {
    private Input$ClassName$Model Model { get; set; } = new();

    /// <summary>
    /// 初期処理
    /// </summary>
    /// <param name="firstRender">初回表示か否か</param>
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                Logger.LogInformation(await GetLogMessage("開始"));

                // 未ログインの場合は即時終了
                if (!await LoginCheck())
                {
                    Logger.LogInformation(await GetLogMessage("ログインチェック失敗"));
                    return;
                }

                // ログイン確認完了
                IsBeforeLoginCheck = false;
                StateHasChanged();

                Logger.LogInformation(await GetLogMessage("ログインチェック成功"));

                // TODO 初回実行処理（不要ならコメントごと削除）
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, await GetLogError(ex));
                GotoErrorPage();
            }
            finally
            {
                Logger.LogInformation(await GetLogMessage("終了"));
            }
        }
    }

    /// <summary>
    /// CSVダウンロード
    /// </summary>
    /// <returns>ダウンロード用モデル</returns>
    /// <remarks>Dataにはbyte[]配列を設定</remarks>
    private DownLoadModel DownLoadCSV()
    {
        var dbRecords = repository.GetCsvList(Model);
        if (!dbRecords.Any())
        {
            return new DownLoadModel(string.Empty, null, "出力対象がありません。");
        }

        var data = new StringBuilder();

        // TODO CSVヘッダ
        //data.AppendLine("No,ProductName,UnitPrice,Qty,TotalPrice");

        // TODO CSV情報
        // foreach (var dbRecord in dbRecords)
        // {
        //     data.AppendLine($"{dbRecord.No},{dbRecord.Key},{dbRecord.UnitPrice},{dbRecord.Qty},{dbRecord.TotalPrice}");
        // }

        // TODO ファイル名設定
        return new DownLoadModel("test.csv", data);
    }
}
