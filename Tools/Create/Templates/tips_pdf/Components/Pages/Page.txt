@page "/$uri$"
@namespace WebApp.Components.Pages
@inherits Base.PageBase
@using PdfReport;
@using PdfReport.Interfaces;
@using PdfReport.DataLists;
@using WebApp.Components.Parts
@using WebApp.Models
@using WebApp.Models.Parts
@using WebApp.Repositories.Interfaces
@inject ILogger<$ClassName$> Logger
@inject I$ClassName$Repository repository

@if (IsBeforeLoginCheck)
{
    // ログイン確認前は表示なし
    return;
}

<PageTitle>$ClassName$</PageTitle>

<h1>$ClassName$</h1>

@* PDFパーツ実装例 *@
<PDFViewer ButtonName="PDF表示" GetDataFunction="DownLoadPDF" IsPortrait="true" />
<PDFViewer ButtonName="PDF表示(別ウインドウ)" GetDataFunction="DownLoadPDF" IsNewWindow="true" />


@code {
    private Input$ClassName$Model Model { get; set; } = new();

    /// <summary>
    /// 初期処理
    /// </summary>
    /// <param name="firstRender">初回表示か否か</param>
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                Logger.LogInformation(await GetLogMessage("開始"));

                // 未ログインの場合は即時終了
                if (!await LoginCheck())
                {
                    Logger.LogInformation(await GetLogMessage("ログインチェック失敗"));
                    return;
                }

                // ログイン確認完了
                IsBeforeLoginCheck = false;
                StateHasChanged();

                Logger.LogInformation(await GetLogMessage("ログインチェック成功"));

                // TODO 初回実行処理（不要ならコメントごと削除）
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, await GetLogError(ex));
                GotoErrorPage();
            }
            finally
            {
                Logger.LogInformation(await GetLogMessage("終了"));
            }
        }
    }

    /// <summary>
    /// PDFダウンロード
    /// </summary>
    /// <returns>ダウンロード用モデル</returns>
    /// <remarks>Dataにはbyte[]配列を設定</remarks>
    private DownLoadModel DownLoadPDF()
    {
        try
        {
            Logger.LogInformation(await GetLogMessage("開始"));

            var dbRecords = repository.GetPdfList(Model);
            if (!dbRecords.Any())
            {
                return new DownLoadModel(string.Empty, null, "出力対象がありません。");
            }

            var pdfDataList = new List<IData>();
            foreach (var dbRecord in dbRecords)
            {
                // TODO 実装
                // pdfDataList.Add(new PdfReport.DataLists.Order(dbRecord.No, dbRecord.Key, dbRecord.UnitPrice, dbRecord.Qty));
            }
            if (!pdfDataList.Any())
            {
                return new DownLoadModel(string.Empty, null, "出力対象がありません。");
            }

            // TODO PDFレイアウトと出力データの設定
            var pdfMain = new PdfMain(LayoutKinds.Order, pdfDataList);

            using (MemoryStream ms = new MemoryStream())
            {
                // PDF作成
                pdfMain.Create(ms);

                // TODO ファイル名設定
                return new DownLoadModel("test.pdf", ms.GetBuffer());
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, await GetLogError(ex));
            return new DownLoadModel(string.Empty, null, "PDF作成に失敗しました。");
        }
        finally
        {
            Logger.LogInformation(await GetLogMessage("終了"));
        }
    }
}
