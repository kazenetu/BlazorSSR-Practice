@inject NavigationManager Navigation
@inherits LayoutComponentBase
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using Providers
@using WebApp.Models

<div class="page">
    <div class="sidebar">
        <NavMenu />
    </div>

    <main>
        <div class="top-row px-4">
            @if (loggedIn)
            {
                <div class="col">
                    @userName
                </div>
                <div class="col text-end">
                    <button @onclick="ChangePasssword" class="btn btn-outline-success @DisablePassrordChange()">パスワード変更</button>
                </div>
                <div class="col text-end">
                    <button @onclick="Logout" class="btn btn-outline-success">ログアウト</button>
                </div>
            }
        </div>

        <article class="content px-4">
            @Body
        </article>
    </main>
</div>

@code
{
    /// <summary>
    /// ログイン状態
    /// </summary>
    private bool loggedIn { set; get; }

    /// <summary>
    /// ユーザーID
    /// </summary>
    private string? userId { set; get; } = "";

    /// <summary>
    /// ユーザー名
    /// </summary>
    private string? userName { set; get; } = "";

    /// <summary>
    /// セッション管理プロバイダークラス
    /// </summary>
    [CascadingParameter]
    private SessionStorageProvider? sessionStorageProvider { get; set; }

    /// <summary>
    /// 初期値設定
    /// </summary>
    /// <param name="firstRender">初期表示か否か</param>
    /// <returns>遅延処理</returns>
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // ログイン状態を取得
            loggedIn = await GetAsync<bool>(UserModel.SessionLoggedIn);

            if (loggedIn)
            {
                // ユーザー情報取得
                var userMasterString = await GetAsync<string>(UserModel.SessionUser);
                if (userMasterString is not null)
                {
                    var userMaster = userMasterString!.Deserialize<UserModel>();
                    userId = userMaster?.ID;
                    userName = userMaster?.Fullname;
                }
            }
            // 画面反映
            StateHasChanged();
        }
    }

    /// <summary>
    /// パスワード変更ページの場合のみボタン無効化
    /// </summary>
    private string DisablePassrordChange()
    {
        if(Navigation.Uri.Contains("/password-change"))
        {
            return "disabled";
        }
        return string.Empty;
    }

    /// <summary>
    /// セッションの取得
    /// </summary>
    /// <param name="name">キー名</param>
    /// <typeparam name="T">変換型</typeparam>
    /// <returns>変換型に変換した値</returns>
    private async Task<T?> GetAsync<T>(string name)
    {
        if (sessionStorageProvider is not null)
        {
            var result = await sessionStorageProvider.GetAsync<T>(name);
            if (result.Success) return result.Value;
        }
        return default(T);
    }

    /// <summary>
    /// ダイアログプロバイダークラス
    /// </summary>
    [CascadingParameter]
    private DialogProvider? dialogProvider { get; set; }

    /// <summary>
    /// パスワード変更
    /// </summary>
    private async Task ChangePasssword()
    {
        if (sessionStorageProvider is null) return;

        await sessionStorageProvider.SetAsync(UserModel.SessioPasswordChangeBeforePage, Navigation.Uri);
        Navigation.NavigateTo($"/password-change/{userId}");
    }


    /// <summary>
    /// ログアウト用JS呼び出し
    /// </summary>
    private async Task Logout()
    {
        if (dialogProvider is null) return;

        // 確認ダイアログ表示
        await dialogProvider.ShowConfirm("ログアウトしますか？", LogoutMain);
    }

    /// <summary>
    /// ログアウト用コールバックメソッド(「はい」クリック時のみ)
    /// </summary>
    private async Task LogoutMain()
    {
        if (sessionStorageProvider is not null)
        {
            await sessionStorageProvider.Clear();
        }
        // ログイン画面へ遷移
        Navigation.NavigateTo("/login");
        Navigation.Refresh(true);
    }
}