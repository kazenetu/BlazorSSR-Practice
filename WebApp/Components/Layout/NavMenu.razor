@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using Providers
@using WebApp.Models

@if (loggedIn)
{
    <div class="top-row ps-3 navbar navbar-dark">
        <div class="container-fluid">
            <a class="navbar-brand" href="">WebApp</a>
        </div>
    </div>

    <input type="checkbox" title="Navigation menu" class="navbar-toggler" />

    <div class="nav-scrollable" onclick="document.querySelector('.navbar-toggler').click()">
        <nav class="flex-column">
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                    <span class="bi bi-house-door-fill-nav-menu" aria-hidden="true"></span> Home
                </NavLink>
            </div>

            <div class="nav-item px-3">
                <NavLink class="nav-link" href="counter">
                    <span class="bi bi-house-door-fill-nav-menu" aria-hidden="true"></span> Counter
                </NavLink>
            </div>

            <div class="nav-item px-3">
                <NavLink class="nav-link" href="weather">
                    <span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> Weather
                </NavLink>
            </div>

            <div class="nav-item px-3">
                <NavLink class="nav-link" href="order">
                    <span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> Order
                </NavLink>
            </div>
        </nav>
    </div>
}

@code
{
    private bool loggedIn { set; get; }
    private bool adminRole { set; get; }

    /// <summary>
    /// セッション管理プロバイダークラス
    /// </summary>
    [CascadingParameter]
    private SessionStorageProvider? sessionStorageProvider { get; set; }

    /// <summary>
    /// 初期値設定
    /// </summary>
    /// <param name="firstRender">初期表示か否か</param>
    /// <returns>遅延処理</returns>
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            loggedIn = await GetAsync<bool>(UserModel.SessionLoggedIn);
            adminRole = await GetAsync<bool>(UserModel.SessionAdminRole);

            // 画面反映
            StateHasChanged();
        }
    }

    /// <summary>
    /// セッションの取得
    /// </summary>
    /// <param name="name">キー名</param>
    /// <typeparam name="T">変換型</typeparam>
    /// <returns>変換型に変換した値</returns>
    private async Task<T?> GetAsync<T>(string name)
    {
        if (sessionStorageProvider is not null)
        {
            var result = await sessionStorageProvider.GetAsync<T>(name);
            if (result.Success) return result.Value;
        }
        return default(T);
    }
}
