@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using WebApp.Components.Providers
@using WebApp.Models

@inject NavigationManager Navigation

@code{
    /// <summary>
    /// セッション管理プロバイダークラス
    /// </summary>
    [CascadingParameter]
    private SessionStorageProvider? sessionStorageProvider { get; set; }

    /// <summary>
    /// ログイン前か否か
    /// </summary>
    protected bool IsBeforeLoginCheck  { get; set; } = true;

    /// <summary>
    /// セッションの取得
    /// </summary>
    /// <param name="name">キー名</param>
    /// <typeparam name="T">変換型</typeparam>
    /// <returns>変換型に変換した値</returns>
    protected async Task<T?> GetAsync<T>(string name)
    {
        if(sessionStorageProvider is not null){
            var result = await sessionStorageProvider.GetAsync<T>(name);
            if(result.Success) return result.Value;
        }
        return default(T);
    }

    /// <summary>
    /// セッションの設定
    /// </summary>
    /// <param name="name">キー名</param>
    /// <param name="value">値</param>
    /// <typeparam name="T">変換型</typeparam>
    protected async Task SetAsync<T>(string name, T value)
    {
        if (sessionStorageProvider is not null)
        {
            await sessionStorageProvider.SetAsync<T>(name, value);
        }
    }

    /// <summary>
    /// セッションの削除
    /// </summary>
    /// <param name="name">キー名</param>
    protected async Task DeleteAsync(string name)
    {
        if (sessionStorageProvider is not null)
        {
            await sessionStorageProvider.DeleteAsync(name);
        }
    }

    /// <summary>
    /// セッションクリア
    /// </summary>
    protected async Task Clear()
    {
        if (sessionStorageProvider is not null)
        {
            await sessionStorageProvider.Clear();
        }
    }

    /// <summary>
    /// ログインチェック
    /// </summary>
    /// <returns>ログイン済みか否か</returns>
    protected async Task<bool> LoginCheck()
    {
        var loggedIn = await GetAsync<bool>(UserModel.SessionLoggedIn);
        if (!loggedIn) Navigation.NavigateTo("/login");
        return loggedIn;
    }

    /// <summary>
    /// ユーザーマスタ取得
    /// </summary>
    /// <returns>ユーザーマスタ</returns>
    protected async Task<UserModel?> GetUserAsync()
    {
        var userMasterString = await GetAsync<string>(UserModel.SessionUser);
        if(userMasterString is not null)
        {
            return userMasterString!.Deserialize<UserModel>();
        }
        return null;
    }

    /// <summary>
    /// ログメッセージ文字列取得
    /// </summary>
    /// <param name="message">独自メッセージ</param>
    /// <param name="memberName">呼び出しメソッド名</param>
    /// <returns>ログメッセージ文字列</returns>
    protected async Task<string> GetLogMessage(string message, [System.Runtime.CompilerServices.CallerMemberName] string memberName = "")
    {
        var userData = string.Empty;
        var userModel = await GetUserAsync();
        if(userModel is not null)
        {
            userData = $"{userModel.ID} {userModel.Fullname} ";
        }

        return $"{userData}{message} url={Navigation.Uri} method={memberName}";
    }

    /// <summary>
    /// エラーログメッセージ文字列取得
    /// </summary>
    /// <param name="exception">例外インスタンス</param>
    /// <param name="memberName">呼び出しメソッド名</param>
    /// <returns>ログメッセージ文字列</returns>
    protected async Task<string> GetLogError(Exception exception, [System.Runtime.CompilerServices.CallerMemberName] string memberName = "")
    {
        var userData = string.Empty;
        var userModel = await GetUserAsync();
        if(userModel is not null)
        {
            userData = $"{userModel.ID} {userModel.Fullname} ";
        }

        return $"Error {userData}Message[{exception.Message}] StackTrace[{exception.StackTrace}] url={Navigation.Uri} method={memberName}";
    }

    /// <summary>
    /// 例外時エラーページに遷移する
    /// </summary>
    protected void GotoErrorPage()
    {
        Navigation.NavigateTo("/Error");
    }

    /// <summary>
    /// ダイアログプロバイダークラス
    /// </summary>
    [CascadingParameter]
    private DialogProvider? dialogProvider {get; set; }

    /// <summary>
    /// アラートメッセージ表示
    /// </summary>
    /// <param name="message">メッセージ本文</param>
    protected async Task ShowAlert(string message)
    {
        if(dialogProvider is null)  return;

        await dialogProvider.ShowAlert(message);
    }

    /// <summary>
    /// 確認メッセージ表示
    /// </summary>
    /// <param name="message">メッセージ本文</param>
    /// <param name="submitFunction">「はい」クリック時のコールバックメソッド</param>
    public async Task ShowConfirm(string message, Func<Task> submitFunction)
    {
        if(dialogProvider is null)  return;

        await dialogProvider.ShowConfirm(message, submitFunction);
    }

}
