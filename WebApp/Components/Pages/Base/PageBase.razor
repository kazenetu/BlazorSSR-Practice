@namespace WebApp.Components.Pages.Base
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using WebApp.Repositories.Interfaces
@using PdfReport;
@using PdfReport.Interfaces
@using PdfReport.DataLists
@using System.Diagnostics
@using System.IO.Compression
@using WebApp.Components.Providers
@using WebApp.Models
@using WebApp.Models.Parts
@inject IPostMasterRepository postMasterRepository
@inject IJSRuntime JS
@inject NavigationManager Navigation

@code{
    #region セッション管理
    /// <summary>
    /// セッション定数；遷移前URL
    /// </summary>
    private const string SessionBeforeNavigateTo ="SessionBeforeNavigateTo";

    /// <summary>
    /// セッション管理プロバイダークラス
    /// </summary>
    [CascadingParameter]
    private SessionStorageProvider? sessionStorageProvider { get; set; }

    /// <summary>
    /// ログイン前か否か
    /// </summary>
    protected bool IsBeforeLoginCheck  { get; set; } = true;

    /// <summary>
    /// セッションの取得
    /// </summary>
    /// <param name="name">キー名</param>
    /// <typeparam name="T">変換型</typeparam>
    /// <returns>変換型に変換した値</returns>
    protected async Task<T?> GetAsync<T>(string name)
    {
        if(sessionStorageProvider is not null){
            var result = await sessionStorageProvider.GetAsync<T>(name);
            if(result.Success) return result.Value;
        }
        return default(T);
    }

    /// <summary>
    /// セッションの設定
    /// </summary>
    /// <param name="name">キー名</param>
    /// <param name="value">値</param>
    /// <typeparam name="T">変換型</typeparam>
    protected async Task SetAsync<T>(string name, T value)
    {
        if (sessionStorageProvider is not null)
        {
            await sessionStorageProvider.SetAsync<T>(name, value);
        }
    }

    /// <summary>
    /// セッションの削除
    /// </summary>
    /// <param name="name">キー名</param>
    protected async Task DeleteAsync(string name)
    {
        if (sessionStorageProvider is not null)
        {
            await sessionStorageProvider.DeleteAsync(name);
        }
    }

    /// <summary>
    /// セッションクリア
    /// </summary>
    protected async Task Clear()
    {
        if (sessionStorageProvider is not null)
        {
            await sessionStorageProvider.Clear();
        }
    }

    /// <summary>
    /// ログインチェック
    /// </summary>
    /// <returns>ログイン済みか否か</returns>
    protected async Task<bool> LoginCheck()
    {
        var loggedIn = await GetAsync<bool>(UserModel.SessionLoggedIn);
        if (!loggedIn) Navigation.NavigateTo("/login");
        return loggedIn;
    }

    /// <summary>
    /// ユーザーマスタ取得
    /// </summary>
    /// <returns>ユーザーマスタ</returns>
    protected async Task<UserModel?> GetUserAsync()
    {
        var userMasterString = await GetAsync<string>(UserModel.SessionUser);
        if(userMasterString is not null)
        {
            return userMasterString!.Deserialize<UserModel>();
        }
        return null;
    }
    #endregion

    #region ログ出力
    /// <summary>
    /// ログメッセージ文字列取得
    /// </summary>
    /// <param name="message">独自メッセージ</param>
    /// <param name="memberName">呼び出しメソッド名</param>
    /// <returns>ログメッセージ文字列</returns>
    protected async Task<string> GetLogMessage(string message, [System.Runtime.CompilerServices.CallerMemberName] string memberName = "")
    {
        var userData = string.Empty;
        var userModel = await GetUserAsync();
        if(userModel is not null)
        {
            userData = $"{userModel.ID} {userModel.Fullname} ";
        }
        var page = Navigation.Uri.Replace(Navigation.BaseUri, string.Empty);

        return $"[{Activity.Current?.Id}] page={page, -20} method={memberName, -22} {userData, -10}{message,-15}";
    }

    /// <summary>
    /// エラーログメッセージ文字列取得
    /// </summary>
    /// <param name="exception">例外インスタンス</param>
    /// <param name="memberName">呼び出しメソッド名</param>
    /// <returns>ログメッセージ文字列</returns>
    protected async Task<string> GetLogError(Exception exception, [System.Runtime.CompilerServices.CallerMemberName] string memberName = "")
    {
        var userData = string.Empty;
        var userModel = await GetUserAsync();
        if(userModel is not null)
        {
            userData = $"{userModel.ID} {userModel.Fullname} ";
        }
        var page = Navigation.Uri.Replace(Navigation.BaseUri, string.Empty);

        return $"[{Activity.Current?.Id}] Error {userData}Message[{exception.Message}] StackTrace[{exception.StackTrace}] page={page} method={memberName}";
    }
    #endregion

    #region 画面遷移
    /// <summary>
    /// 例外時エラーページに遷移する
    /// </summary>
    protected void GotoErrorPage()
    {
        Navigation.NavigateTo("/error");
    }

    /// <summary>
    /// 指定ページに遷移する
    /// </summary>
    /// <param name="url">対象ページのURL</param>
    protected async Task GotoPageAsync(string url)
    {
        // 現在のURLをセッションに格納する
        await SetAsync(SessionBeforeNavigateTo, Navigation.Uri);

        // 画面遷移
        Navigation.NavigateTo(url);
    }

    /// <summary>
    /// セッションに格納したURLに遷移する
    /// </summary>
    protected async Task PageBackAsync()
    {
        // 現在のURLをセッションから取得
        var url = await GetAsync<string>(SessionBeforeNavigateTo);

        // セッション削除
        await DeleteAsync(SessionBeforeNavigateTo);

        // URLがnullの場合、Homeページに設定
        if(url is null)
            url = Navigation.BaseUri;

        // 画面遷移
        Navigation.NavigateTo(url!);
    }
    #endregion

    #region ダイアログ表示
    /// <summary>
    /// ダイアログプロバイダークラス
    /// </summary>
    [CascadingParameter]
    private DialogProvider? dialogProvider {get; set; }

    /// <summary>
    /// アラートメッセージ表示
    /// </summary>
    /// <param name="message">メッセージ本文</param>
    /// <param name="submitFunction">「OK」クリック時のコールバックメソッド</param>
    protected async Task ShowAlert(string message, Func<Task>? submitFunction = null)
    {
        if(dialogProvider is null)  return;

        await dialogProvider.ShowAlert(message, submitFunction);
    }

    /// <summary>
    /// 確認メッセージ表示
    /// </summary>
    /// <param name="message">メッセージ本文</param>
    /// <param name="submitFunction">「はい」クリック時のコールバックメソッド</param>
    public async Task ShowConfirm(string message, Func<Task> submitFunction)
    {
        if(dialogProvider is null)  return;

        await dialogProvider.ShowConfirm(message, submitFunction);
    }

    /// <summary>
    /// 指定ダイアログ表示
    /// </summary>
    /// <param name="tagId">表示対象のid</param>
    public async Task ShowDialog(string tagId)
    {
        if(dialogProvider is null)  return;

        await dialogProvider.ShowDialog(tagId);
    }

    /// <summary>
    /// 指定ダイアログ非表示
    /// </summary>
    /// <param name="tagId">非表示対象のid</param>
    public async Task CloseDialog(string tagId)
    {
        if(dialogProvider is null)  return;

        await dialogProvider.CloseDialog(tagId);
    }
    #endregion

    #region 漢字→フリガナ変換
    /// <summary>
    /// 漢字フリガナ変換JavaScriptの初期化処理実行
    /// </summary>
    protected async Task InitKanjiToFurigana()
    {
        await JS.InvokeVoidAsync("import", "./Components/Pages/Base/PageBase.razor.js");
    }

    /// <summary>
    /// 漢字フリガナ変換JavaScriptの処理実行
    /// </summary>
    /// <param name="kanjiId">漢字ID</param>
    /// <param name="furiganaId">フリガナID</param>
    protected async Task KanjiToFurigana(string kanjiId, string furiganaId)
    {
        await JS.InvokeVoidAsync("kanjiToFurigana", kanjiId, furiganaId);
    }
    #endregion

    #region inputタグのEnterKeyイベント無効化
    /// <summary>
    /// inputタグのEnterKeyイベント無効化実行
    /// </summary>
    protected async Task DisableEnterKey()
    {
        await JS.InvokeVoidAsync("disableEnterKey");
    }
    #endregion

    #region 複数PDFをZIPファイルに圧縮
    /// <summary>
    /// 出力用データ単位でPDF作成し、ZIPファイル圧縮する
    /// </summary>
    /// <param name="zipFileName">Zipファイル名</param>
    /// <param name="layoutKind">帳票レイアウト種別</param>
    /// <param name="dataList">出力用データリスト</param>
    /// <param name="pdfFileColumnIndex">PDF名に利用するカラム番号</param>
    /// <returns>ダウンロード用モデル</returns>
    protected DownLoadModel CompressMultiplePDFsIntoZIP(string zipFileName ,LayoutKinds layoutKind, List<IData> dataList, int pdfFileColumnIndex)
    {
        // 1件ごとにPDF作成、格納
        var downLoadModels = new List<DownLoadModel>();
        foreach(var data in dataList)
        {
            var pdfMain = new PdfMain(layoutKind, new List<IData>{data});
            using (MemoryStream ms = new MemoryStream())
            {
                // PDF作成
                pdfMain.Create(ms);

                var pdfFileName = data.GetColumn(pdfFileColumnIndex).value.ToString();
                downLoadModels.Add(new DownLoadModel($"{pdfFileName}.pdf", ms.GetBuffer()));
            }
        }
        
        // ZIP圧縮、ファイル生成
        byte[] contentData;
        using(MemoryStream memoryStream = new MemoryStream())
        {
            using (ZipArchive archive = new ZipArchive(memoryStream, ZipArchiveMode.Create, true))
            {
                foreach(var downloadModel in downLoadModels)
                {
                    var entry = archive.CreateEntry(downloadModel.FileName);
                    using (var entryStream = entry.Open())
                    {
                        byte[] contents = (byte[])downloadModel.Data!;
                        using (var zipStream = new MemoryStream(contents))
                        {
                            zipStream.CopyTo(entryStream);
                        }
                    }
                }
            }
            // ZIPファイルのバイト配列を格納
            contentData = memoryStream.ToArray();
        }

        // Zipファイル名とバイト配列をダウンロード用モデルに格納して返す
        return new DownLoadModel(zipFileName, contentData);
    }
    #endregion

    #region 郵便番号・住所検索
    /// <summary>
    /// 郵便番号検索
    /// </summary>
    /// <param name="postCd">郵便番号</param>
    /// <returns>郵便番号・住所 クラス</returns>
    /// <remarks>住所を設定</remarks>
    protected PostMasterModel SearchPostCd(string postCd)
    {
        return postMasterRepository.SearchPostCd(postCd);
    }

    /// <summary>
    /// 住所検索
    /// </summary>
    /// <param name="address">住所文字列</param>
    /// <returns>郵便番号・住所 クラス</returns>
    /// <remarks>郵便番号を設定</remarks>
    protected PostMasterModel SearchAddress(string address)
    {
        return postMasterRepository.SearchAddress(address);
    }

    /// <summary>
    /// 住所カナ取得
    /// </summary>
    /// <param name="address">住所文字列</param>
    /// <returns>住所カナ文字列</returns>
    protected string GetAddressKana(string address)
    {
        return postMasterRepository.GetAddressKana(address);
    }
    #endregion
}
