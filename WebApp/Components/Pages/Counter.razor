@page "/counter"
@inherits Base.PageBase
@inject ILogger<Counter> Logger

@if (IsBeforeLoginCheck)
{
    // ログイン確認前は表示なし
    return;
}

<PageTitle>Counter</PageTitle>

<h1>Counter</h1>

<p>Current count: <strong>@count</strong></p>
<button @onclick="CountUp" class="btn btn-outline-success">CounteUp</button>
<button @onclick="CountClear" class="btn btn-outline-success">Clear</button>

@code {
    private int count;

    /// <summary>
    /// 初期処理
    /// </summary>
    /// <param name="firstRender">初回表示か否か</param>
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                Logger.LogInformation(await GetLogMessage("開始"));

                // 未ログインの場合は即時終了
                if (!await LoginCheck())
                {
                    Logger.LogInformation(await GetLogMessage("ログインチェック失敗"));
                    return;
                }

                // ログイン確認完了
                IsBeforeLoginCheck = false;

                Logger.LogInformation(await GetLogMessage("ログインチェック成功"));

                // 初期カウンタ設定
                var result = await GetAsync<int>("Cont");
                count = result;

                Logger.LogInformation(await GetLogMessage("初期カウンタ設定完了"));

                StateHasChanged();
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, await GetLogError(ex));
                GotoErrorPage();
            }
            finally
            {
                Logger.LogInformation(await GetLogMessage("終了"));
            }
        }
    }

    /// <summary>
    /// カウントアップ
    /// </summary>
    private async Task CountUp()
    {
        try
        {
            Logger.LogInformation(await GetLogMessage("開始"));

            count++;
            await SetAsync("Cont", count);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, await GetLogError(ex));
            GotoErrorPage();
        }
        finally
        {
            Logger.LogInformation(await GetLogMessage("終了"));
        }
    }

    /// <summary>
    /// カウントクリア
    /// </summary>
    /// <returns></returns>
    private async Task CountClear()
    {
        try
        {
            Logger.LogInformation(await GetLogMessage("開始"));

            count = 0;
            await DeleteAsync("Count");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, await GetLogError(ex));
            GotoErrorPage();
        }
        finally
        {
            Logger.LogInformation(await GetLogMessage("終了"));
        }
    }
}
