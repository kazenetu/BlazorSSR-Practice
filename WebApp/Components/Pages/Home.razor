@page "/"
@inherits Base.PageBase
@using PdfReport;
@using PdfReport.Interfaces;
@using PdfReport.DataLists;
@using WebApp.Components.Parts
@using WebApp.Models.Parts
@inject ILogger<Home> Logger

@if (IsBeforeLoginCheck)
{
    // ログイン確認前は表示なし
    return;
}

<PageTitle>Home</PageTitle>

<h1>Hello, world!</h1>

Welcome to your new app.

<div class="page-header">
    <PDFViewer ButtonName="封筒印刷PDF表示" GetDataFunction="DownLoadPDF" IsPortrait="true" />
</div>

<div>
    <button class="btn btn-primary" @onclick="ShowAlertTest">アラートメッセージ表示</button>
</div>
<div>
    <button class="btn btn-primary" @onclick="ShowConfirmTest">確認メッセージ表示</button>
</div>

<div class="card" style="margin-top:3rem;width:35rem;">
    <div class="card-body">
        <div class="card-title">漢字→カタカナ変換サンプル</div>

        <div class="row row-margin">
            <div class="col">
                <label class="col-md-2" for="kanji">漢字</label>
                <InputText class="col-md-9" id="kanji" @bind-Value="Kanji" @onblur="@(() => OnBlur("kanji", "furigana"))" />
            </div>
        </div>
        <div class="row">
            <div class="col col-md-2 offset-md-3">
            ↓
            </div>
        </div>
        <div class="row row-margin">
            <div class="col">
                <label class="col-md-2" for="furigana">カタカナ</label>
                <InputText class="col-md-9" id="furigana" @bind-Value="Katakana" />
                <div class="container" style="margin-top:1rem">
                    <button class="col-3 offset-md-8 btn btn-primary btn-sm" @onclick="ClearKatakana">クリア</button>
                </div>

            </div>
        </div>
    </div>
</div>

<div>
    <button class="btn btn-primary" @onclick="ShowDialogTest">ダイアログ表示</button>
</div>
<dialog id="saveDialog" style="width:80vw;">
    <div class="modal-content">
      <div class="modal-header">
        <h1 class="modal-title fs-5">注文編集</h1>
        <button type="button" class="btn-close" aria-label="Close" @onclick="CloseDialogTest"></button>
      </div>
      <div class="modal-body">
        <EditForm method="post" Model="OrderEditModel" OnValidSubmit="Save" id="edit">
            <div class="row row-margin">
                <div class="col">
                    <label class="col-md-2" for="ProductName">商品名</label>
                    <InputText class="col-md-6" id="ProductName" @bind-Value="OrderEditModel!.ProductName" />
                </div>
            </div>
            <div class="row row-margin">
                <div class="col">
                    <label class="col-md-2" for="UnitPrice">単価</label>
                    <InputNumber class="col-md-6" id="UnitPrice" @bind-Value="OrderEditModel!.UnitPrice" TValue="decimal" />
                </div>
            </div>
            <div class="row row-margin">
                <div class="col">
                    <label class="col-md-2" for="Qty">数量</label>
                    <InputNumber class="col-md-6" id="Qty" @bind-Value="OrderEditModel!.Qty" TValue="decimal" />
                </div>
            </div>
        </EditForm>
      </div>
      <div class="modal-footer">
        <button type="submit" form="edit" class="btn btn-outline-success">保存</button>
      </div>
    </div>
</dialog>

@code {
#region ダイアログ表示サンプル：登録系
    [SupplyParameterFromForm]
    private WebApp.Models.OrderModel OrderEditModel { get; set; } = new (0, string.Empty, 0, 0, 0);
    
    private async Task ShowDialogTest()
    {
        await ShowDialog("saveDialog");
    }

    private async Task CloseDialogTest()
    {
        await CloseDialog("saveDialog");
    }

    /// <summary>
    /// 保存
    /// </summary>
    /// <param name="editContext"></param>
    private async Task Save(EditContext editContext)
    {
        await ShowAlert("TODO 登録処理実装", CloseDialogTest);
        //await CloseDialogTest();
    }
#endregion

    /// <summary>
    /// 漢字テキスト用文字列
    /// </summary>
    private string? Kanji;

    /// <summary>
    /// カタカナテキスト用文字列
    /// </summary>
    private string? Katakana;

    /// <summary>
    /// 漢字テキストのフォーカスロストイベント
    /// </summary>
    /// <param name="kanjiId">漢字テキストのID</param>
    /// <param name="furiganaId">フリガナテキストのID</param>
    private async Task OnBlur(string kanjiId, string furiganaId)
    {
        // フリガナが入力されている場合は漢字フリガナ変換は未実施
        if (!string.IsNullOrEmpty(Katakana)) return;

        // 漢字フリガナ変換の実施
        await KanjiToFurigana(kanjiId, furiganaId);
    }

    /// <summary>
    /// カタカナテキストのクリア
    /// </summary>
    private void ClearKatakana()
    {
        Katakana = string.Empty;
    }

    private async Task ShowAlertTest()
    {
        await ShowAlert("アラートメッセージ");
    }
    private async Task ShowConfirmTest()
    {
        await ShowConfirm("確認メッセージ", ShowConfirmYes);
    }
    private async Task ShowConfirmYes()
    {
        await ShowAlert("「はい」が押されました。");
    }

    /// <summary>
    /// 初期処理
    /// </summary>
    /// <param name="firstRender">初回表示か否か</param>
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                Logger.LogInformation(await GetLogMessage("開始"));

                // 未ログインの場合は即時終了
                if (!await LoginCheck())
                {
                    Logger.LogInformation(await GetLogMessage("ログインチェック失敗"));
                    return;
                }

                // ログイン確認完了
                IsBeforeLoginCheck = false;
                StateHasChanged();

                Logger.LogInformation(await GetLogMessage("ログインチェック成功"));

                // 漢字フリガナ変換の初期化
                await InitKanjiToFurigana();
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, await GetLogError(ex));
                GotoErrorPage();
            }
            finally
            {
                Logger.LogInformation(await GetLogMessage("終了"));
            }

        }
    }

    /// <summary>
    /// PDFダウンロード
    /// </summary>
    /// <returns>ダウンロード用モデル</returns>
    /// <remarks>Dataにはbyte[]配列を設定</remarks>
    private async Task<DownLoadModel> DownLoadPDF()
    {
        try
        {
            Logger.LogInformation(await GetLogMessage("開始"));

            var pdfDataList = new List<IData>();

            // TODO DBから取得したデータを格納
            pdfDataList.Add(new PdfReport.DataLists.Envelope("123-4567","123456789012345678901234","１２３４５６７８９０"));
            pdfDataList.Add(new PdfReport.DataLists.Envelope("123-4567","Ａ県Ｂ市123-4","サンプル太郎"));


            var pdfMain = new PdfMain(LayoutKinds.Envelope, pdfDataList);

            using (MemoryStream ms = new MemoryStream())
            {
                // PDF作成
                pdfMain.Create(ms);

                return new DownLoadModel("test.pdf", ms.GetBuffer());
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, await GetLogError(ex));
            return new DownLoadModel(string.Empty, null, "PDF作成に失敗しました。");
        }
        finally
        {
            Logger.LogInformation(await GetLogMessage("終了"));
        }
    }
}