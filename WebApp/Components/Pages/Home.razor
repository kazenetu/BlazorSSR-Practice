@page "/"
@using MeCab
@inherits Base.PageBase
@inject ILogger<Home> Logger

@if (IsBeforeLoginCheck)
{
    // ログイン確認前は表示なし
    return;
}

<PageTitle>Home</PageTitle>

<h1>Hello, world!</h1>

Welcome to your new app.

<div>
    <button class="btn btn-primary" @onclick="ShowAlertTest">アラートメッセージ表示</button>
</div>
<div>
    <button class="btn btn-primary" @onclick="ShowConfirmTest">確認メッセージ表示</button>
</div>

<div class="card" style="margin-top:3rem;width:35rem;">
    <div class="card-body">
        <div class="card-title">漢字→カタカナ変換サンプル</div>

        <div class="row">
            <div class="col">
                <label class="col-md-2" for="kanji">漢字</label>
                <InputText class="col-md-9" id="kanji" @bind-Value="Value" @onblur="OnBlur" />
            </div>
        </div>
        <div class="row">
            <div class="col col-md-2 offset-md-3">
            ↓
            </div>
        </div>
        <div class="row">
            <div class="col">
                <label class="col-md-2" for="UnitPrice">カタカナ</label>
                <InputText class="col-md-9" id="kanji" @bind-Value="Katakana" />
                <div class="container" style="margin-top:1rem">
                    <button class="col-3 offset-md-8 btn btn-primary btn-sm" @onclick="ClearKatakana">クリア</button>
                </div>

            </div>
        </div>
    </div>
</div>


@code {
    private string? Katakana;
    private string? Value;

    private async Task OnBlur()
    {
        await Task.Run(()=>{
            Katakana = ToKatakana(Value);
        });
    }

    private string ToKatakana(string? kanjiValue)
    {
        if(kanjiValue is null) return string.Empty;

        var result = new System.Text.StringBuilder();
        var parameter = new MeCabParam();
        var tagger = MeCabTagger.Create(parameter);

        foreach (var node in tagger.ParseToNodes(kanjiValue))
        {
            if (node.CharType > 0)
            {
                var features = node.Feature.Split(',');
                if (features.Length > 8)
                {
                    var yomiKatakana = features[7];
                    result.Append($"{yomiKatakana}");
                }
                else
                {
                    result.Append(node.Surface);
                }
            }
        }
        return result.ToString();
    }

    private void ClearKatakana()
    {
        Katakana = string.Empty;
    }

    private async Task ShowAlertTest()
    {
        await ShowAlert("アラートメッセージ");
    }
    private async Task ShowConfirmTest()
    {
        await ShowConfirm("確認メッセージ", ShowConfirmYes);
    }
    private async Task ShowConfirmYes()
    {
        await ShowAlert("「はい」が押されました。");
    }

    /// <summary>
    /// 初期処理
    /// </summary>
    /// <param name="firstRender">初回表示か否か</param>
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                Logger.LogInformation(await GetLogMessage("開始"));

                // 未ログインの場合は即時終了
                if (!await LoginCheck())
                {
                    Logger.LogInformation(await GetLogMessage("ログインチェック失敗"));
                    return;
                }

                // ログイン確認完了
                IsBeforeLoginCheck = false;
                StateHasChanged();

                Logger.LogInformation(await GetLogMessage("ログインチェック成功"));
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, await GetLogError(ex));
                GotoErrorPage();
            }
            finally
            {
                Logger.LogInformation(await GetLogMessage("終了"));
            }

        }
    }
}