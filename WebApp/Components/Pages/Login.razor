@page "/login"
@namespace WebApp.Components.Pages
@using OtpNet
@using WebApp.Models
@using WebApp.Repositories.Interfaces
@using static System.Net.WebRequestMethods
@inherits Base.PageBase
@inject IUserRepository repository
@inject NavigationManager Navigation
@inject ILogger<Login> Logger
@inject Microsoft.Extensions.Options.IOptions<SettingConfigModel> Config

<PageTitle>@Title</PageTitle>

<h1>@Title</h1>

@if (errorMessages.Any())
{
    <div class=" col-md-6 offset-md-3" style="border: 1px red solid; margin-bottom: 1em;color:red;">
        <ul style="margin-block-end:0em">
            @foreach (var item in errorMessages)
            {
                <li>@item </li>
            }
        </ul>
    </div>
}
<EditForm method="post" Model="Model" OnValidSubmit="SubmitLogin">
    @if (!ShowAuthentication)
    {
        <div class="row  row-margin">
            <div class="col col-md-6 offset-md-3">
                <label class="col-3">ID</label>
                <InputText @bind-Value="Model!.ID" />
            </div>
        </div>

        <div class="row row-margin">
            <div class="col col-md-6 offset-md-3">
                <label class="col-3">パスワード</label>
                <InputText type="password" @bind-Value="Model!.Password" />
            </div>
        </div>

        <div class="row row-margin" style="margin-top:1em;">
            <div class="col col-md-5 offset-md-5 text-right">
                <input class="btn btn-primary mb-2 float-right" id="send" type="submit" value="ログイン" />
            </div>
        </div>
    }
</EditForm>

<EditForm method="post" Model="Model" OnValidSubmit="SubmitAuthentication">
    @if (ShowAuthentication)
    {
        <div class="row row-margin">
            <div class="col col-md-6 offset-md-3">
                <label class="col-3">認証コード</label>
                <InputText maxlength="6" @bind-Value="Model!.Authentication" />
            </div>
        </div>

        <div class="row row-margin" style="margin-top:1em;">
            <div class="col col-md-5 offset-md-5 text-right">
                <input class="btn btn-primary mb-2 float-right" id="send" type="submit" value="認証" />
            </div>
        </div>
    }
</EditForm>

@code
{
    [SupplyParameterFromForm]
    private LoginModel? Model { get; set; }

    /// <summary>
    /// 認証コード表示するか
    /// </summary>
    private bool ShowAuthentication = false;

    /// <summary>
    /// エラーメッセージリスト
    /// </summary>
    private List<string> errorMessages = new();

    /// <summary>
    /// 初期化処理
    /// </summary>
    protected override void OnInitialized()
    {
        Model ??= new();

        // 認証コード
        if (Config.Value.RequiredAuthentication)
        {
            Model.RequiredAuthentication = Config.Value.RequiredAuthentication;
        }

        // タイトル設定
        Title = "ログイン";
    }

    /// <summary>
    /// 初期値設定
    /// </summary>
    /// <param name="firstRender">初期表示か否か</param>
    /// <returns>遅延処理</returns>
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                Logger.LogInformation(await GetLogMessage("開始"));

                // セッションクリア
                await Clear();

                // 画面反映
                StateHasChanged();

                // 「入力項目でエンターキー押すと誤送信」を無効化
                await DisableEnterKey();
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, await GetLogError(ex));
                GotoErrorPage();
            }
            finally
            {
                Logger.LogInformation(await GetLogMessage("終了"));
            }
        }
    }

    /// <summary>
    /// ログイン
    /// </summary>
    /// <param name="editContext"></param>
    private async void SubmitLogin(EditContext editContext)
    {
        try
        {
            Logger.LogInformation(await GetLogMessage("開始"));

            // エラーメッセージクリア
            errorMessages.Clear();

            // 未入力チェック
            var loginModel = editContext.Model as LoginModel;
            if (loginModel?.ID is null)
            {
                // エラーメッセージ
                errorMessages.Add("IDを入力してください。");
            }
            if (loginModel?.Password is null)
            {
                // エラーメッセージ
                errorMessages.Add("パスワードを入力してください。");
            }
            if (errorMessages.Any())
            {
                Logger.LogInformation(await GetLogMessage($"入力エラー ログインID:{loginModel?.ID ?? "なし"}"));

                // 画面反映
                StateHasChanged();
                return;
            }

            Logger.LogInformation(await GetLogMessage($"ログインチェック前 ログインID:{loginModel!.ID}"));
            if (!EqalsPassword(loginModel!))
            {
                errorMessages.Add("IDまたはパスワードが間違っています。");
            }

            if (errorMessages.Any())
            {
                Logger.LogInformation(await GetLogMessage($"ログインチェックエラー ログインID:{loginModel!.ID}"));

                // 画面反映
                StateHasChanged();
                return;
            }

            var userModel = repository.GetUser(loginModel!.ID!);
            if (Model!.RequiredAuthentication && !string.IsNullOrEmpty(userModel!.TotpSecrets))
            {
                // ユーザーマスタに認証コードが設定されている場合は認証コード入力を促す
                ShowAuthentication = true;
                StateHasChanged();
            }
            else
            {
                // ユーザーマスタに認証コードが設定されていない場合はログイン成功
                await SetAsync(UserModel.SessionFullName, userModel!.Fullname);
                await SetAsync(UserModel.SessionLoggedIn, true);
                await SetAsync(UserModel.SessionAdminRole, userModel!.AdminRole);
                await SetAsync(UserModel.SessionUser, userModel.Serialize());

                Logger.LogInformation(await GetLogMessage($"ログイン成功"));

                // 画面遷移
                Navigation.NavigateTo("/");
                Navigation.Refresh(true);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, await GetLogError(ex));
            GotoErrorPage();
        }
        finally
        {
            Logger.LogInformation(await GetLogMessage("終了"));
        }
    }

    /// <summary>
    /// 認証コード確定
    /// </summary>
    /// <param name="editContext"></param>
    private async void SubmitAuthentication(EditContext editContext)
    {
        try
        {
            Logger.LogInformation(await GetLogMessage("開始"));

            // エラーメッセージクリア
            errorMessages.Clear();

            // 未入力チェック
            var loginModel = editContext.Model as LoginModel;
            if (string.IsNullOrEmpty(loginModel!.Authentication))
            {
                errorMessages.Add("認証コードを入力してください。");
            }

            if (errorMessages.Any())
            {
                Logger.LogInformation(await GetLogMessage($"入力エラー ログインID:{loginModel?.ID ?? "なし"}"));

                // 画面反映
                StateHasChanged();
                return;
            }

            // 認証コードチェック
            var userModel = repository.GetUser(loginModel!.ID!);
            if (loginModel.RequiredAuthentication)
            {
                var totp = new Totp(Base32Encoding.ToBytes(userModel!.TotpSecrets), totpSize: 6);
                if (!totp.VerifyTotp(loginModel.Authentication, out _, VerificationWindow.RfcSpecifiedNetworkDelay))
                {
                    errorMessages.Add("認証コードが間違っています。");
                }
            }

            if (errorMessages.Any())
            {
                Logger.LogInformation(await GetLogMessage($"ログインチェックエラー ログインID:{loginModel!.ID}"));

                // 画面反映
                StateHasChanged();
                return;
            }

            // ログイン成功
            await SetAsync(UserModel.SessionFullName, userModel!.Fullname);
            await SetAsync(UserModel.SessionLoggedIn, true);
            await SetAsync(UserModel.SessionAdminRole, userModel!.AdminRole);
            await SetAsync(UserModel.SessionUser, userModel.Serialize());

            Logger.LogInformation(await GetLogMessage($"ログイン成功"));

            // 画面遷移
            Navigation.NavigateTo("/");
            Navigation.Refresh(true);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, await GetLogError(ex));
            GotoErrorPage();
        }
        finally
        {
            Logger.LogInformation(await GetLogMessage("終了"));
        }
    }

    private bool EqalsPassword(LoginModel model)
    {
        return repository.EqalsPassword(model.ID!, model.Password!);
    }

    public class LoginModel
    {
        public string? ID;
        public string? Password;
        public bool RequiredAuthentication { set; get; }
        public string? Authentication { set; get; }
    }
}