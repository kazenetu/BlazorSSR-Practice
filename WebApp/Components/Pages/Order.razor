@page "/order"
@page "/order/{page:int}"
@namespace WebApp.Components.Pages
@inherits Base.PageBase
@inject IOrderRepository repository
@inject ILogger<Order> Logger
@inject NavigationManager Navigation
@using System.Text
@using WebApp.Components.Parts
@using WebApp.Models.Parts
@using WebApp.Models
@using WebApp.Repositories.Interfaces

@using PdfReport;
@using PdfReport.Interfaces;
@using PdfReport.DataLists;

@if (IsBeforeLoginCheck)
{
    // ログイン確認前は表示なし
    return;
}

<PageTitle>注文一覧</PageTitle>

<h1>注文一覧</h1>

@if (pageRecords == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row page-header">
        <div class="col">
            <button @onclick="@(() => ToEdit(string.Empty))" class="btn btn-outline-success">新規作成</button>
        </div>
        <div class="col">
            <FileDownload ButtonName="CSVダウンロード" GetDataFunction="DownLoadCSV" />
            <PDFViewer ButtonName="PDF表示" GetDataFunction="DownLoadPDF" IsPortrait="true" />
            <PDFViewer ButtonName="PDF表示(別ウインドウ)" GetDataFunction="DownLoadPDF" IsNewWindow="true" />
        </div>
    </div>

    <Pagination PageName="/order" CurrentPageNumber="@Page" TotalRecords="GetTotalRecords()" RecordsPerPage="@PageCount" PageChanged="ShowPage" />
    <table class="table">
        <thead>
            <tr>
                <th>No</th>
                <th>ProductName</th>
                <th>UnitPrice</th>
                <th>Qty</th>
                <th>TotalPrice</th>
                <th>編集</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var oder in pageRecords)
            {
                <tr>
                    <td>@oder.No</td>
                    <td>@oder.ProductName</td>
                    <td>@oder.UnitPrice</td>
                    <td>@oder.Qty</td>
                    <td>@oder.TotalPrice</td>
                    <td><button @onclick="@(() => ToEdit(oder.ProductName))" class="btn btn-outline-success">編集</button></td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    #region ページング用
    /// <summary>
    /// ページング用：現在のページ数
    /// </summary>
    [Parameter]
    public int Page { get; set; }

    /// <summary>
    /// 定数：ページング用：1ページのレコード数
    /// </summary>
    private const int PageCount = 10;

    /// <summary>
    /// 1ページの表示レコード
    /// </summary>
    private OrderModel[]? pageRecords;

    /// <summary>
    /// 総レコード数取得
    /// </summary>
    /// <returns>総レコード数</returns>
    private int GetTotalRecords()
    {
        // DBから対象レコード数を返す
        return repository.GetTotalRecord();
    }

    /// <summary>
    /// 指定ページのレコード表示
    /// </summary>
    /// <param name="pageIndex">指定ページ(1ベース)</param>
    private void ShowPage(int pageIndex)
    {
        // ゼロベースのページ数を設定
        var zeroBasePageIndex = pageIndex - 1;

        // DBから1ページ分のレコード取得
        pageRecords = repository.GetList(zeroBasePageIndex * PageCount,  PageCount);
        StateHasChanged();
    }
    #endregion

    /// <summary>
    /// 初期処理
    /// </summary>
    /// <param name="firstRender">初回表示か否か</param>
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                Logger.LogInformation(await GetLogMessage("開始"));

                // 未ログインの場合は即時終了
                if (!await LoginCheck())
                {
                    Logger.LogInformation(await GetLogMessage("ログインチェック失敗"));
                    return;
                }

                // ログイン確認完了
                IsBeforeLoginCheck = false;
                StateHasChanged();

                Logger.LogInformation(await GetLogMessage("ログインチェック成功"));

                // Simulate asynchronous loading to demonstrate streaming rendering
                await Task.Delay(500);

                // ページ指定なしの場合は1ページ
                if (Page == 0)
                {
                    Page = 1;
                }

                // 検索結果を取得
                ShowPage(Page);

                Logger.LogInformation(await GetLogMessage($"検索結果:{repository.GetTotalRecord()}件"));
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, await GetLogError(ex));
                GotoErrorPage();
            }
            finally
            {
                Logger.LogInformation(await GetLogMessage("終了"));
            }
        }
    }

    /// <summary>
    /// 新規・編集
    /// </summary>
    /// <param name="productName">製品名</param>
    private async Task ToEdit(string productName)
    {
        // 画面遷移
        await GotoPageAsync($"/order-edit/{productName}");
    }

    /// <summary>
    /// CSVダウンロード
    /// </summary>
    /// <returns>ダウンロード用モデル</returns>
    private DownLoadModel DownLoadCSV()
    {
        var orders = repository.GetOderList();
        if (!orders.Any())
        {
            return new DownLoadModel(string.Empty, null, "出力対象がありません。");
        }

        var data = new StringBuilder();
        data.AppendLine("No,ProductName,UnitPrice,Qty,TotalPrice");

        foreach (var oder in orders)
        {
            data.AppendLine($"{oder.No},{oder.ProductName},{oder.UnitPrice},{oder.Qty},{oder.TotalPrice}");
        }

        return new DownLoadModel("test.csv", data);
    }

    /// <summary>
    /// PDFダウンロード
    /// </summary>
    /// <returns>ダウンロード用モデル</returns>
    /// <remarks>Dataにはbyte[]配列を設定</remarks>
    private DownLoadModel DownLoadPDF()
    {
        var orders = repository.GetOderList();
        if (!orders.Any())
        {
            return new DownLoadModel(string.Empty, null, "出力対象がありません。");
        }

        var pdfOrders = new List<IData>();
        foreach (var oder in orders)
        {
            pdfOrders.Add(new PdfReport.DataLists.Order(oder.No, oder.ProductName, oder.UnitPrice, oder.Qty));
        }
        var pdfMain = new PdfMain(LayoutKinds.Order, pdfOrders);

        using (MemoryStream ms = new MemoryStream())
        {
            // PDF作成
            pdfMain.Create(ms);

            return new DownLoadModel("test.pdf", ms.GetBuffer());
        }
    }
}
