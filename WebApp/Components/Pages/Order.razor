@page "/order"
@page "/order/{page:int}"
@namespace WebApp.Components.Pages
@using System.Text
@using WebApp.Components.Parts
@using WebApp.Models.Parts
@using WebApp.Models
@using WebApp.Repositories.Interfaces
@using PdfReport;
@using PdfReport.Interfaces;
@using PdfReport.DataLists;
@inherits Base.PageBase
@inject IOrderRepository repository
@inject ILogger<Order> Logger
@inject NavigationManager Navigation

@if (IsBeforeLoginCheck)
{
    // ログイン確認前は表示なし
    return;
}

<PageTitle>注文一覧</PageTitle>

<h1>注文一覧</h1>

@if (pageRecords == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row page-header">
        <div class="col">
            <button @onclick="@(() => ToEdit(string.Empty))" class="btn btn-outline-success">新規作成</button>
        </div>
        <div class="col">
            <FileDownload ButtonName="CSVダウンロード" GetDataFunction="DownLoadCSV" OKClickFunction="OnOKClickedCSV" IsShiftJis="true"/>
            <PDFViewer ButtonName="PDF表示" GetDataFunction="DownLoadPDF" OKClickFunction="OnOKClickedPDF" IsPortrait="true" />
            <PDFViewer ButtonName="PDF表示(別ウインドウ)" GetDataFunction="DownLoadPDF" OKClickFunction="OnOKClickedPDF" IsNewWindow="true" />
        </div>
    </div>

    <EditForm method="post" Model="InputModel" OnSubmit="Search" id="seach">
        <div class="card col-md-8 offset-md-2 mb-5">
            <div class="card-body">

                <div class="row row-margin">
                    <div class="col">
                        <label class="" for="SerchProductName">製品名(あいまい検索)</label>
                        <InputText class="col-md-6" id="SerchProductName" @bind-Value="InputModel!.ProductName" />
                    </div>
                </div>

                <div class="row row-margin">
                    <div class="col">
                        <label class="col-md-4" for="StartUnitPrice">単価</label>
                        <InputNumber class="col-md-4 text-end" id="StartUnitPrice" @bind-Value="InputModel!.StartUnitPrice" />
                    </div>
                    <div class="col">
                        <label class="col-md-4" for="EndUnitPrice">〜</label>
                        <InputNumber class="col-md-4 text-end" id="EndUnitPrice" @bind-Value="InputModel!.EndUnitPrice" />
                    </div>
                </div>

                <div class="row row-margin">
                    <div class="col">
                        <label class="col-md-4" for="StartTotalPrice">合計金額</label>
                        <InputNumber class="col-md-4 text-end" id="StartTotalPrice" @bind-Value="InputModel!.StartTotalPrice" />
                    </div>
                    <div class="col">
                        <label class="col-md-4" for="EndTotalPrice">〜</label>
                        <InputNumber class="col-md-4 text-end" id="EndTotalPrice" @bind-Value="InputModel!.EndTotalPrice" />
                    </div>
                </div>

            </div>
            <button type="submit" form="seach" class="btn btn-outline-success">検索</button>
        </div>
    </EditForm>

    <Pagination PageName="/order" CurrentPageNumber="@Page" TotalRecords="@TotalRecords" RecordsPerPage="@Common.PageRecordCount" />
    <table class="table">
        <thead>
            <tr>
                <th style="width:2rem">No</th>
                <th style="min-width:15rem">ProductName</th>
                <th style="width:5rem">UnitPrice</th>
                <th style="width:3rem">Qty</th>
                <th style="width:9rem">TotalPrice</th>
                <th>編集</th>
            </tr>
        </thead>
        <tbody>
            @if(TotalRecords > 0) {
                @foreach (var oder in pageRecords)
                {
                    <tr>
                        <td class="text-end">@oder.No</td>
                        <td>@oder.ProductName</td>
                        <td class="text-end">@(oder.UnitPrice.ToString("#,#"))</td>
                        <td class="text-end">@(oder.Qty.ToString("#,#"))</td>
                        <td class="text-end">@(oder.TotalPrice.ToString("#,#"))</td>
                        <td><button @onclick="@(() => ToEdit(oder.ProductName))" class="btn btn-outline-success">編集</button></td>
                    </tr>
                }
            }
        </tbody>
    </table>
}

@code {
    /// <summary>
    /// セッション定数：検索条件
    /// </summary>
    public const string SessionOrderSearch = "SessionOrderSearch"; 

    /// <summary>
    /// InputタグのEnterKeyを無効に設定したか？
    /// </summary>
    private bool DisabledEnterKey = false;

    /// <summary>
    /// 入力条件
    /// </summary>
    private InputOrderModel InputModel { get; set; } = new();

    /// <summary>
    /// 検索条件
    /// </summary>
    private InputOrderModel Model { get; set; } = new();

    #region ページング用
    /// <summary>
    /// ページング用：現在のページ数
    /// </summary>
    [Parameter]
    public int Page { get; set; }

    /// <summary>
    /// ページング用：総レコード数
    /// </summary>
    public int TotalRecords { get; set; }

    /// <summary>
    /// 1ページの表示レコード
    /// </summary>
    private OrderModel[]? pageRecords;

    /// <summary>
    /// ページ変更イベント
    /// </summary>
    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        DisabledEnterKey = false;

        // 入力条件と検索条件が不一致の場合
        if (InputModel != Model)
        {
            // 入力情報を検索条件で上書き
            InputModel = Model.Copy();
        }

        // 検索結果を取得
        ShowPage(Page);
    }

    /// <summary>
    /// 指定ページのレコード表示
    /// </summary>
    /// <param name="pageIndex">指定ページ(1ベース)</param>
    /// <param name="isRefreshTotalRecords">総レコード数を更新するか否か</param>
    private void ShowPage(int pageIndex, bool isRefreshTotalRecords = false)
    {
        // ページ数がマイナスの場合は終了
        if (pageIndex <= 0)
            return;

        if (isRefreshTotalRecords)
        {
            // 総レコード数更新
            TotalRecords = repository.GetTotalRecord(Model);
        }

        // ゼロベースのページ数を設定
        var zeroBasePageIndex = pageIndex - 1;

        // DBから1ページ分のレコード取得
        pageRecords = repository.GetList(Model, zeroBasePageIndex * Common.PageRecordCount,  Common.PageRecordCount);
        StateHasChanged();
    }
    #endregion

    /// <summary>
    /// 初期処理
    /// </summary>
    /// <param name="firstRender">初回表示か否か</param>
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var oldPage = Page;
        if (firstRender)
        {
            try
            {
                Logger.LogInformation(await GetLogMessage("開始"));

                // 未ログインの場合は即時終了
                if (!await LoginCheck())
                {
                    Logger.LogInformation(await GetLogMessage("ログインチェック失敗"));
                    return;
                }

                // ログイン確認完了
                IsBeforeLoginCheck = false;
                StateHasChanged();

                Logger.LogInformation(await GetLogMessage("ログインチェック成功"));

                // ページ指定なしの場合は1ページ
                if (Page == 0)
                {
                    Page = 1;
                }

                // 検索条件の復元
                var tempModel = await GetAsync<InputOrderModel>(SessionOrderSearch);
                if (tempModel is not null) 
                    InputModel = tempModel;

                // 検索条件に入力条件を設定
                Model = InputModel.Copy();

                // 検索結果を取得(総レコード数更新)
                ShowPage(Page, true);

                Logger.LogInformation(await GetLogMessage($"検索結果:{repository.GetTotalRecord(Model)}件"));
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, await GetLogError(ex));
                GotoErrorPage();
            }
            finally
            {
                Logger.LogInformation(await GetLogMessage("終了"));
            }
        }

        // IntputタグのEnterKey無効が実施されていない場合は設定
        if (Page > 0 && !DisabledEnterKey)
        {
            // 「入力項目でエンターキー押すと誤送信」を無効化
            await DisableEnterKey();
            DisabledEnterKey = true;
        }

        if (oldPage <= 0)
        {
            DisabledEnterKey = false;
            await DeleteAsync(SessionOrderSearch);
            InputModel = new();
            Model = new();
            TotalRecords = repository.GetTotalRecord(Model);
            Navigation.NavigateTo("/order/1");
        }
    }

    /// <summary>
    /// 検索イベント
    /// </summary>
    private async Task Search()
    {
        // 1ページ
        Page = 1;

        // 検索条件の保存
        await SetAsync(SessionOrderSearch, InputModel);

        // 検索条件に入力条件を設定
        Model = InputModel.Copy();

        // 検索結果を取得(総レコード数更新)
        ShowPage(Page, true);
        Navigation.NavigateTo("/order/1");
    }

    /// <summary>
    /// 新規・編集
    /// </summary>
    /// <param name="productName">製品名</param>
    private async Task ToEdit(string productName)
    {
        // 画面遷移
        await GotoPageAsync($"/order-edit/{productName}");
    }

    #region CSVダウンロード
    /// <summary>
    /// CSVダウンロード:例外エラー発生しているか？
    /// </summary>
    private bool IsExceptionDownLoadCSV;

    /// <summary>
    /// CSVダウンロード
    /// </summary>
    /// <returns>ダウンロード用モデル</returns>
    private async Task<DownLoadModel> DownLoadCSV()
    {
        DisabledEnterKey = false;
        IsExceptionDownLoadCSV = false;
        try
        {
            Logger.LogInformation(await GetLogMessage("開始"));

            var orders = repository.GetOderList();

            if (!orders.Any())
            {
                return new DownLoadModel(string.Empty, null, "出力対象がありません。");
            }

            var data = new StringBuilder();
            data.AppendLine("No,ProductName,UnitPrice,Qty,TotalPrice");

            foreach (var oder in orders)
            {
                data.AppendLine($"{oder.No},{oder.ProductName},{oder.UnitPrice},{oder.Qty},{oder.TotalPrice}");
            }

            return new DownLoadModel("test.csv", data);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, await GetLogError(ex));
            IsExceptionDownLoadCSV = true;
            return new DownLoadModel(string.Empty, null, "CSV作成に失敗しました。");
        }
        finally
        {
            Logger.LogInformation(await GetLogMessage("終了"));
        }
    }

    /// <summary>
    /// CSVダウンロード時のエラメッセージOKボタンクリックイベント
    /// </summary>
    private async Task OnOKClickedCSV()
    {
        // 例外エラー時はエラーページに遷移
        if (IsExceptionDownLoadCSV)
        {
            await Task.Run(()=>{
                GotoErrorPage();
            });
        }
    }
    #endregion

    #region PDF表示
    /// <summary>
    /// PDF表示:例外エラー発生しているか？
    /// </summary>
    private bool IsExceptionDisplayPDF;

    /// <summary>
    /// PDFダウンロード
    /// </summary>
    /// <returns>ダウンロード用モデル</returns>
    /// <remarks>Dataにはbyte[]配列を設定</remarks>
    private async Task<DownLoadModel> DownLoadPDF()
    {
        DisabledEnterKey = false;

        IsExceptionDisplayPDF = false;
        try
        {
            Logger.LogInformation(await GetLogMessage("開始"));

            var orders = repository.GetOderList();

            if (!orders.Any())
            {
                return new DownLoadModel(string.Empty, null, "出力対象がありません。");
            }

            var pdfOrders = new List<IData>();
            foreach (var oder in orders)
            {
                pdfOrders.Add(new PdfReport.DataLists.Order(oder.No, oder.ProductName, oder.UnitPrice, oder.Qty));
            }
            var pdfMain = new PdfMain(LayoutKinds.Order, pdfOrders);

            using (MemoryStream ms = new MemoryStream())
            {
                // PDF作成
                pdfMain.Create(ms);

                return new DownLoadModel("test.pdf", ms.GetBuffer());
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, await GetLogError(ex));
            IsExceptionDisplayPDF = true;
            return new DownLoadModel(string.Empty, null, "PDF作成に失敗しました。");
        }
        finally
        {
            Logger.LogInformation(await GetLogMessage("終了"));
        }
    }

    /// <summary>
    /// PDFダウンロード時のエラメッセージOKボタンクリックイベント
    /// </summary>
    private async Task OnOKClickedPDF()
    {
        // 例外エラー時はエラーページに遷移
        if (IsExceptionDisplayPDF)
        {
            await Task.Run(()=>{
                GotoErrorPage();
            });
        }
    }
    #endregion
}
