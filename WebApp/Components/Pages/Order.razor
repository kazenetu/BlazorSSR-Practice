@page "/order"
@inherits Base.PageBase
@inject IOrderRepository orderRepository
@inject ILogger<Order> Logger
@using System.Text
@using WebApp.Components.Parts
@using WebApp.Models.Parts
@using WebApp.Models
@using WebApp.Repositories.Interfaces

@using PdfReport;
@using PdfReport.Interfaces;
@using PdfReport.DataLists;

@if (IsBeforeLoginCheck)
{
    // ログイン確認前は表示なし
    return;
}

<PageTitle>注文一覧</PageTitle>

<h1>注文一覧</h1>

@if (orders == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <FileDownload ButtonName="CSVダウンロード" GetDataFunction="DownLoadCSV"/>
    <PDFViewer ButtonName="PDF表示" GetDataFunction="DownLoadPDF" IsPortrait="true"/>

    <table class="table">
        <thead>
            <tr>
                <th>No</th>
                <th>ProductName</th>
                <th>UnitPrice</th>
                <th>Qty</th>
                <th>TotalPrice</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var oder in orders)
            {
                <tr>
                    <td>@oder.No</td>
                    <td>@oder.ProductName</td>
                    <td>@oder.UnitPrice</td>
                    <td>@oder.Qty</td>
                    <td>@oder.TotalPrice</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private OrderModel[]? orders;

    /// <summary>
    /// 初期処理
    /// </summary>
    /// <param name="firstRender">初回表示か否か</param>
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                Logger.LogInformation(await GetLogMessage("開始"));

                // 未ログインの場合は即時終了
                if (!await LoginCheck())
                {
                    Logger.LogInformation(await GetLogMessage("ログインチェック失敗"));
                    return;
                }

                // ログイン確認完了
                IsBeforeLoginCheck = false;
                StateHasChanged();

                Logger.LogInformation(await GetLogMessage("ログインチェック成功"));

                // Simulate asynchronous loading to demonstrate streaming rendering
                await Task.Delay(500);

                // 検索結果を表示
                orders = orderRepository.GetOderList().ToArray();
                StateHasChanged();

                Logger.LogInformation(await GetLogMessage($"検索結果:{orders.Count()}件"));
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, await GetLogError(ex));
                GotoErrorPage();
            }
            finally
            {
                Logger.LogInformation(await GetLogMessage("終了"));
            }
        }
    }

    /// <summary>
    /// CSVダウンロード
    /// </summary>
    /// <returns>ダウンロード用モデル</returns>
    private DownLoadModel DownLoadCSV()
    {
        if (orders is null || !orders.Any())
        {
            return new DownLoadModel(string.Empty, null, "出力対象がありません。");
        }

        var data = new StringBuilder();
        data.AppendLine("No,ProductName,UnitPrice,Qty,TotalPrice");

        foreach (var oder in orders)
        {
            data.AppendLine($"{oder.No},{oder.ProductName},{oder.UnitPrice},{oder.Qty},{oder.TotalPrice}");
        }

        return new DownLoadModel("test.csv", data);
    }

    /// <summary>
    /// PDFダウンロード
    /// </summary>
    /// <returns>ダウンロード用モデル</returns>
    /// <remarks>Dataにはbyte[]配列を設定</remarks>
    private DownLoadModel DownLoadPDF()
    {
        if (orders is null || !orders.Any())
        {
            return new DownLoadModel(string.Empty, null, "出力対象がありません。");
        }

        var pdfOrders = new List<IData>();
        foreach (var oder in orders)
        {
            pdfOrders.Add(new PdfReport.DataLists.Order(oder.No, oder.ProductName, oder.UnitPrice, oder.Qty));
        }
        var pdfMain = new PdfMain(LayoutKinds.Order, pdfOrders);

        using (MemoryStream ms = new MemoryStream())
        {
            // PDF作成
            pdfMain.Create(ms);

            return new DownLoadModel("test.pdf", ms.GetBuffer());
        }
    }
}
