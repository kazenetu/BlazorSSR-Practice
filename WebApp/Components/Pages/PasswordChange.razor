@page "/password-change/{id}"
@inherits Base.PageBase
@inject ILogger<PasswordChange> Logger
@inject IUserRepository repository
@inject NavigationManager Navigation
@using WebApp.Models
@using WebApp.Repositories.Interfaces

@if (IsBeforeLoginCheck)
{
    // ログイン確認前は表示なし
    return;
}

<PageTitle>パスワード変更</PageTitle>

<h1>パスワード変更</h1>

<div class="row page-header">
    <div class="col">
        <button @onclick="Cancel" class="btn btn-outline-success">キャンセル</button>
    </div>
    <div class="col">
        <button type="submit" form="edit" class="btn btn-outline-success">変更</button>
    </div>
</div>

<EditForm method="post" Model="Model" OnValidSubmit="Change" id="edit">
    <div class="card col-md-8 offset-md-2">
        <div class="card-body">
            <div class="row">
                <label class="col-md-4" for="OldPassword">旧パスワード</label>
                <InputText class="col-md-5" id="OldPassword" @bind-Value="Model!.OldPassword" />
            </div>
            <div class="row">
            <label class="col-md-4" for="NewPassword">新パスワード</label>
                <InputText class="col-md-5" id="NewPassword" @bind-Value="Model!.NewPassword" />
                </div>
            <div class="row">
                <label class="col-md-4" for="NewPasswordAgain">新パスワード(もう一度)</label>
                <InputText class="col-md-5" id="NewPasswordAgain" @bind-Value="Model!.NewPasswordAgain" />
            </div>
        </div>
    </div>
</EditForm>

@code {
    /// <summary>
    /// ユーザーID
    /// </summary>
    [Parameter]
    public string ID { get; set; } = "";

    /// <summary>
    /// 編集対象
    /// </summary>
    [SupplyParameterFromForm]
    private InputData Model { get; set; } = new();

    /// <summary>
    /// 初期処理
    /// </summary>
    /// <param name="firstRender">初回表示か否か</param>
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                Logger.LogInformation(await GetLogMessage("開始"));

                // 未ログインの場合は即時終了
                if (!await LoginCheck())
                {
                    Logger.LogInformation(await GetLogMessage("ログインチェック失敗"));
                    return;
                }

                // ログイン確認完了
                IsBeforeLoginCheck = false;

                Logger.LogInformation(await GetLogMessage("ログインチェック成功"));

                // 対象データを検索
                Model.userModel = repository.GetUser(ID);

                StateHasChanged();

                Logger.LogInformation(await GetLogMessage("対象データ取得完了"));
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, await GetLogError(ex));
                GotoErrorPage();
            }
            finally
            {
                Logger.LogInformation(await GetLogMessage("終了"));
            }
        }
    }

    /// <summary>
    /// 変更
    /// </summary>
    /// <param name="editContext"></param>
    private async Task Change(EditContext editContext)
    {
        try
        {
            Logger.LogInformation(await GetLogMessage("変更開始"));

            var errorMessages = new System.Text.StringBuilder();

            // 入力チェック
            var inputData = editContext.Model as InputData;
            if (string.IsNullOrEmpty(inputData?.OldPassword))
            {
                // エラーメッセージ
                errorMessages.AppendLine("旧パスワードを入力してください。");
            }
            if (string.IsNullOrEmpty(inputData?.NewPassword))
            {
                // エラーメッセージ
                errorMessages.AppendLine("新パスワードを入力してください。");
            }
            if (string.IsNullOrEmpty(inputData?.NewPasswordAgain))
            {
                // エラーメッセージ
                errorMessages.AppendLine("新パスワード(もう一度)を入力してください。");
            }
            if (!string.IsNullOrEmpty(errorMessages.ToString()))
            {
                Logger.LogInformation(await GetLogMessage("入力エラー"));

                await ShowAlert(errorMessages.ToString());
                return;
            }

            //相関チェック
            if (inputData?.OldPassword == inputData?.NewPassword)
            {
                // エラーメッセージ
                errorMessages.AppendLine("新パスワードは旧パスワード以外を入力してください。");
                Logger.LogInformation(await GetLogMessage("相関エラー"));

                await ShowAlert(errorMessages.ToString());
                return;
            }
            if (inputData?.NewPassword != inputData?.NewPasswordAgain)
            {
                // エラーメッセージ
                errorMessages.AppendLine("新パスワードと新パスワード(もう一度)が一致していません。");
                Logger.LogInformation(await GetLogMessage("相関エラー"));

                await ShowAlert(errorMessages.ToString());
                return;
            }

            // DBチェック
            if (!repository.EqalsPassword(ID, inputData?.OldPassword!))
            {
                // エラーメッセージ
                errorMessages.AppendLine("旧パスワードが間違っています。");
                Logger.LogInformation(await GetLogMessage("DBエラー"));

                await ShowAlert(errorMessages.ToString());
                return;
            }

            // 楽観的ロック確認
            if (Model.userModel is not null)
            {
                var dbModel = repository.GetUser(ID);
                if (Model.userModel.Version != dbModel!.Version)
                {
                    Logger.LogInformation(await GetLogMessage($"楽観ロックエラー 取得時:{Model.userModel.Version} 最新:{dbModel.Version}"));

                    await ShowAlert($"すでに更新されています。{Environment.NewLine}キャンセルを押して、再度パスワード変更ボタンを押してください。");
                    return;
                }
            }

            // 登録・更新
            var tempUserMaster = Model!.userModel;
            var userModel = new UserModel(ID, Model.NewPassword!, string.Empty, tempUserMaster!.Fullname, tempUserMaster!.AdminRole, tempUserMaster!.Disabled , tempUserMaster!.Version);
            var user = await GetUserAsync();

            if (repository.Save(userModel, user!.ID, GetType().Name))
            {
                Logger.LogInformation(await GetLogMessage($"変更成功"));
                await ShowAlert("パスワード変更しました。", ChangeOK);
            }
            else
            {
                Logger.LogInformation(await GetLogMessage($"変更失敗"));
                await ShowAlert("パスワード変更に失敗しました。");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, await GetLogError(ex));
            GotoErrorPage();
        }
        finally
        {
            Logger.LogInformation(await GetLogMessage("変更終了"));
        }
    }

    /// <summary>
    /// 変更成功アラートOKボタン クリックイベント
    /// </summary>
    private async Task ChangeOK()
    {
        // セッションクリア
        await Clear();

        // ログインページに遷移
        Navigation.NavigateTo("/Login", true);
    }

    /// <summary>
    /// キャンセル確認
    /// </summary>
    private async Task Cancel()
    {
        await ShowConfirm("パスワード変更をキャンセルしますか？", ShowConfirmYes);
    }

    /// <summary>
    /// キャンセル確認YESボタン クリックイベント
    /// </summary>
    private async Task ShowConfirmYes()
    {
        // 画面遷移
        var beforePage = await GetAsync<string>(UserModel.SessioPasswordChangeBeforePage);
        if (string.IsNullOrEmpty(beforePage))
            beforePage = "/";
        Navigation.NavigateTo(beforePage);
    }

    /// <summary>
    /// 画面入力
    /// </summary>
    private class InputData
    {
        /// <summary>
        /// 旧パスワード
        /// </summary>
        public string? OldPassword { get; set; }

        /// <summary>
        /// 新パスワード
        /// </summary>
        public string? NewPassword { get; set; }

        /// <summary>
        /// 新パスワード(確認)
        /// </summary>
        public string? NewPasswordAgain { get; set; }

        /// <summary>
        /// ユーザーモデル
        /// </summary>
        public UserModel? userModel { get; set; }
    }
}
