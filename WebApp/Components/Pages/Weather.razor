@page "/weather"
@page "/weather/{page:int}"
@namespace WebApp.Components.Pages
@using WebApp.Components.Parts
@using WebApp.Models
@using WebApp.Repositories.Interfaces
@inherits Base.PageBase
@inject IWeatherForecastRepository repository
@inject ILogger<Weather> Logger
@inject NavigationManager Navigation

@if (IsBeforeLoginCheck)
{
    // ログイン確認前は表示なし
    return;
}

<PageTitle>@Title</PageTitle>

<h1>@Title</h1>

<p>This component demonstrates showing data.</p>

@if (pageForecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <EditForm method="post" Model="InputModel" OnSubmit="Search" id="search">
        <div class="card col-md-8 offset-md-2 mb-5">
            <div class="card-body">

                <div class="row row-margin">
                    <div class="col">
                        <label class="col-md-4" for="StartDate">日付</label>
                        <InputDate class="col-md-6" id="StartDate" @bind-Value="InputModel!.StartDate" />
                    </div>
                    <div class="col">
                        <label class="col-md-4" for="EndDate">〜</label>
                        <InputDate class="col-md-6" id="EndDate" @bind-Value="InputModel!.EndDate" />
                    </div>
                </div>

                <div class="row row-margin">
                    <div class="col">
                        <label class="col-md-4" for="StartDate">温度</label>
                        <InputNumber class="col-md-4 text-end" id="StartDate" @bind-Value="InputModel!.StartTemperatureC" />
                    </div>
                    <div class="col">
                        <label class="col-md-4" for="EndDate">〜</label>
                        <InputNumber class="col-md-4 text-end" id="EndDate" @bind-Value="InputModel!.EndTemperatureC" />
                    </div>
                </div>

            </div>

            <div>
                <button type="submit" form="search" class="btn btn-outline-success">検索</button>
                <span style="margin-right: 2em;" />
                <button @onclick="ClearInput" class="btn btn-outline-success">クリア</button>
            </div>
        </div>
    </EditForm>

    <Pagination PageName="/weather" CurrentPageNumber="@Page" TotalRecords="@TotalRecords" RecordsPerPage="@Common.PageRecordCount" />
    @if (pageForecasts.Any())
    {
        <table class="table">
            <thead>
                <tr>
                    <th>Date</th>
                    <th>Temp. (C)</th>
                    <th>Temp. (F)</th>
                    <th>Summary</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var forecast in pageForecasts)
                {
                    <tr>
                        <td>@forecast.TargetDate.ToShortDateString()</td>
                        <td>@forecast.TemperatureC</td>
                        <td>@forecast.TemperatureF</td>
                        <td>@forecast.Summary</td>
                    </tr>
                }
            </tbody>
        </table>
        <Pagination PageName="/weather" CurrentPageNumber="@Page" TotalRecords="@TotalRecords" RecordsPerPage="@Common.PageRecordCount" IsShowRecordCount="false"/>
    }
    else
    {
        <SearchResultZero />
    }
}

@code {
    /// <summary>
    /// セッション定数：検索条件
    /// </summary>
    public const string SessionWeatherSearch = "SessionWeatherSearch"; 

    /// <summary>
    /// 入力条件
    /// </summary>
    private InputWeatherForecastModel InputModel { get; set; } = new();

    /// <summary>
    /// 検索条件
    /// </summary>
    private InputWeatherForecastModel Model { get; set; } = new();

    /// <summary>
    /// InputタグのEnterKeyを無効に設定したか？
    /// </summary>
    private bool DisabledEnterKey = false;

    /// <summary>
    /// ページング用：現在のページ数
    /// </summary>
    [Parameter]
    public int Page { get; set; }

    /// <summary>
    /// ページング用：総レコード数
    /// </summary>
    public int TotalRecords { get; set; }

    /// <summary>
    /// 1ページの表示レコード
    /// </summary>
    private WeatherForecastModel[]? pageForecasts;

    /// <summary>
    /// 初期化処理
    /// </summary>
    protected override void OnInitialized()
    {
        // タイトル設定
        Title = "天気予報一覧サンプル";
    }

    /// <summary>
    /// 初期処理
    /// </summary>
    /// <param name="firstRender">初回表示か否か</param>
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var oldPage = Page;
        if (firstRender)
        {
            try
            {
                Logger.LogInformation(await GetLogMessage("開始"));

                // 未ログインの場合は即時終了
                if (!await LoginCheck())
                {
                    Logger.LogInformation(await GetLogMessage("ログインチェック失敗"));
                    return;
                }

                // ログイン確認完了
                IsBeforeLoginCheck = false;
                StateHasChanged();

                Logger.LogInformation(await GetLogMessage("ログインチェック成功"));

                // ページ指定なしの場合は1ページ
                if (Page == 0)
                {
                    Page = 1;
                }

                // 検索条件の復元
                var tempModel = await GetAsync<InputWeatherForecastModel>(SessionWeatherSearch);
                if (tempModel is not null)
                    InputModel = tempModel;

                // 検索条件に入力条件を設定
                Model = InputModel.Copy();

                // 検索結果を取得(総レコード数更新)
                ShowPage(Page, true);

                Logger.LogInformation(await GetLogMessage($"検索結果:{repository.GetTotalRecord(Model)}件"));
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, await GetLogError(ex));
                GotoErrorPage();
            }
            finally
            {
                Logger.LogInformation(await GetLogMessage("終了"));
            }
        }

        // IntputタグのEnterKey無効が実施されていない場合は設定
        if (Page > 0 && !DisabledEnterKey)
        {
            // 「入力項目でエンターキー押すと誤送信」を無効化
            await DisableEnterKey();
            DisabledEnterKey = true;
        }

        if (oldPage <= 0)
        {
            DisabledEnterKey = false;
            await DeleteAsync(SessionWeatherSearch);
            InputModel = new();
            Model = new();
            TotalRecords = repository.GetTotalRecord(Model);
            Navigation.NavigateTo("/weather/1");
        }
    }

    /// <summary>
    /// ページ変更イベント
    /// </summary>
    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
       DisabledEnterKey = false;

        // 入力条件と検索条件が不一致の場合
        if (InputModel != Model)
        {
            // 入力情報を検索条件で上書き
            InputModel = Model.Copy();
        }

        // 検索結果を取得
        ShowPage(Page);
    }

    /// <summary>
    /// 検索イベント
    /// </summary>
    private async Task Search()
    {
        // 1ページ
        Page = 1;

        // 検索条件の保存
        await SetAsync(SessionWeatherSearch, InputModel);

        // 検索条件に入力条件を設定
        Model = InputModel.Copy();

        // 検索結果を取得(総レコード数更新)
        ShowPage(Page, true);
        Navigation.NavigateTo("/weather/1");
    }

    /// <summary>
    /// 検索クリア
    /// </summary>
    private async Task ClearInput()
    {
        InputModel.Clear();

        // 1ページ
        Page = 1;

        // 検索条件の保存
        await SetAsync(SessionSearch, InputModel);

        // 検索条件に入力条件を設定
        Model = InputModel.Copy();

        // 検索結果を取得(総レコード数更新)
        ShowPage(Page, true);
        Navigation.NavigateTo("/order/1");
    }

    /// <summary>
    /// 指定ページのレコード表示
    /// </summary>
    /// <param name="pageIndex">指定ページ(1ベース)</param>
    /// <param name="isRefreshTotalRecords">総レコード数を更新するか否か</param>
    private void ShowPage(int pageIndex, bool isRefreshTotalRecords = false)
    {
        if (isRefreshTotalRecords)
        {
            // 総レコード数更新
            TotalRecords = repository.GetTotalRecord(Model);
        }

        // ゼロベースのページ数を設定
        var zeroBasePageIndex = pageIndex - 1;

        // DBから1ページ分のレコード取得
        pageForecasts = repository.GetList(Model, zeroBasePageIndex * Common.PageRecordCount,  Common.PageRecordCount);
        StateHasChanged();
    }

    private class WeatherForecast
    {
        public DateOnly Date { get; set; }
        public int TemperatureC { get; set; }
        public string? Summary { get; set; }
        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }
}
