@page "/weather"
@inherits Base.PageBase
@attribute [StreamRendering]
@inject ILogger<Weather> Logger
@using WebApp.Components.Parts

@if (IsBeforeLoginCheck)
{
    // ログイン確認前は表示なし
    return;
}

<PageTitle>Weather</PageTitle>

<h1>Weather</h1>

<p>This component demonstrates showing data.</p>

@if (pageForecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <Pagination TotalRecords="GetTotalRecords()" RecordsPerPage="@PageCount" PageChanged="ShowPage" />
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in pageForecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    /// <summary>
    /// 定数：ページング用：1ページのレコード数
    /// </summary>
    private const int PageCount = 10;

    /// <summary>
    /// 1ページの表示レコード
    /// </summary>
    private WeatherForecast[]? pageForecasts;

    /// <summary>
    /// 総レコード
    /// </summary>
    private WeatherForecast[]? allForecasts;

    /// <summary>
    /// 初期処理
    /// </summary>
    /// <param name="firstRender">初回表示か否か</param>
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                Logger.LogInformation(await GetLogMessage("開始"));

                // 未ログインの場合は即時終了
                if (!await LoginCheck())
                {
                    Logger.LogInformation(await GetLogMessage("ログインチェック失敗"));
                    return;
                }

                // ログイン確認完了
                IsBeforeLoginCheck = false;
                StateHasChanged();

                Logger.LogInformation(await GetLogMessage("ログインチェック成功"));

                // Simulate asynchronous loading to demonstrate streaming rendering
                await Task.Delay(500);

                // 検索結果を取得
                var startDate = DateOnly.FromDateTime(DateTime.Now);
                var summaries = new[] { "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching" };
                var summariesIndex = 1;
                allForecasts = Enumerable.Range(1, 1001).Select(index => new WeatherForecast
                {
                    Date = startDate.AddDays(index),
                    TemperatureC = summariesIndex++,
                    Summary = summaries[Random.Shared.Next(summaries.Length)]
                }).ToArray();

                // 1ページ目を表示
                ShowPage(1);

                Logger.LogInformation(await GetLogMessage($"検索結果:{allForecasts.Count()}件"));
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, await GetLogError(ex));
                GotoErrorPage();
            }
            finally
            {
                Logger.LogInformation(await GetLogMessage("終了"));
            }
        }
    }

    /// <summary>
    /// 総レコード数取得
    /// </summary>
    /// <returns>総レコード数</returns>
    private int GetTotalRecords()
    {
        if(allForecasts is null)
            return 0;

        // TODO DBから対象レコード数を返す
        return allForecasts.Length;
    }

    /// <summary>
    /// 指定ページのレコード表示
    /// </summary>
    /// <param name="pageIndex">指定ページ</param>
    private void ShowPage(int pageIndex)
    {
        if(allForecasts is null)
            return;

        // TODO DBから1ページ分のレコード取得
        pageForecasts = allForecasts.Skip((pageIndex-1) * PageCount).Take(PageCount).ToArray();
        StateHasChanged();
    }

    private class WeatherForecast
    {
        public DateOnly Date { get; set; }
        public int TemperatureC { get; set; }
        public string? Summary { get; set; }
        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }
}
