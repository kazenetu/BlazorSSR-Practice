@page "/weather"
@page "/weather/{page:int}"
@namespace WebApp.Components.Pages
@using WebApp.Components.Parts
@using WebApp.Models
@using WebApp.Repositories.Interfaces
@inherits Base.PageBase
@inject ILogger<Weather> Logger
@inject IWeatherForecastRepository repository

@if (IsBeforeLoginCheck)
{
    // ログイン確認前は表示なし
    return;
}

<PageTitle>Weather</PageTitle>

<h1>Weather</h1>

<p>This component demonstrates showing data.</p>

@if (pageForecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <Pagination PageName="/weather" CurrentPageNumber="@Page" TotalRecords="GetTotalRecords()" RecordsPerPage="@PageCount" PageChanged="ShowPage" />
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in pageForecasts)
            {
                <tr>
                    <td>@forecast.TargetDate.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {

    /// <summary>
    /// ページング用：現在のページ数
    /// </summary>
    [Parameter]
    public int Page { get; set; }

    /// <summary>
    /// 定数：ページング用：1ページのレコード数
    /// </summary>
    private const int PageCount = 10;

    /// <summary>
    /// 1ページの表示レコード
    /// </summary>
    private WeatherForecastModel[]? pageForecasts;

    /// </summary>
    /// <param name="firstRender">初回表示か否か</param>
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                Logger.LogInformation(await GetLogMessage("開始"));

                // 未ログインの場合は即時終了
                if (!await LoginCheck())
                {
                    Logger.LogInformation(await GetLogMessage("ログインチェック失敗"));
                    return;
                }

                // ログイン確認完了
                IsBeforeLoginCheck = false;
                StateHasChanged();

                Logger.LogInformation(await GetLogMessage("ログインチェック成功"));

                // Simulate asynchronous loading to demonstrate streaming rendering
                await Task.Delay(500);

                // ページ指定なしの場合は1ページ
                if (Page == 0)
                {
                    Page = 1;
                }

                // 検索結果を取得
                ShowPage(Page);

                Logger.LogInformation(await GetLogMessage($"検索結果:{repository.GetTotalRecord()}件"));
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, await GetLogError(ex));
                GotoErrorPage();
            }
            finally
            {
                Logger.LogInformation(await GetLogMessage("終了"));
            }
        }
    }

    /// <summary>
    /// 総レコード数取得
    /// </summary>
    /// <returns>総レコード数</returns>
    private int GetTotalRecords()
    {
        // DBから対象レコード数を返す
        return repository.GetTotalRecord();
    }

    /// <summary>
    /// 指定ページのレコード表示
    /// </summary>
    /// <param name="pageIndex">指定ページ(1ベース)</param>
    private void ShowPage(int pageIndex)
    {
        // ゼロベースのページ数を設定
        var zeroBasePageIndex = pageIndex - 1;

        // DBから1ページ分のレコード取得
        pageForecasts = repository.GetList(zeroBasePageIndex * PageCount,  PageCount);
        StateHasChanged();
    }

    private class WeatherForecast
    {
        public DateOnly Date { get; set; }
        public int TemperatureC { get; set; }
        public string? Summary { get; set; }
        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }
}
