@namespace WebApp.Components.Parts
@using WebApp.Models.Parts
@using WebApp.Components.Providers
@inject IJSRuntime JS

<button class="btn btn-primary" @onclick="Download">@ButtonName</button>

<script>
    @*ファイルダウンロード*@
    window.downloadFileFromStream = async (fileName, contentStreamReference) => {
        const arrayBuffer = await contentStreamReference.arrayBuffer();
        const blob = new Blob([arrayBuffer]);
        const url = URL.createObjectURL(blob);
        const anchorElement = document.createElement('a');
        anchorElement.href = url;
        anchorElement.download = fileName ?? '';
        anchorElement.click();
        anchorElement.remove();
        URL.revokeObjectURL(url);
    }
</script>

@code {
    #region ダイアログ表示
    /// <summary>
    /// アラートメッセージOKボタンクリック後のイベント
    /// </summary>
    [Parameter]
    public Func<Task>? OKClickFunction { get; set; }

    /// <summary>
    /// ダイアログプロバイダークラス
    /// </summary>
    [CascadingParameter]
    private DialogProvider? dialogProvider { get; set; }

    /// <summary>
    /// アラートメッセージ表示
    /// </summary>
    /// <param name="message">メッセージ本文</param>
    /// <param name="submitFunction">「OK」クリック時のコールバックメソッド</param>
    protected async Task ShowAlert(string message, Func<Task>? submitFunction = null)
    {
        if(dialogProvider is null)  return;

        await dialogProvider.ShowAlert(message, submitFunction);
    }
    #endregion

    /// <summary>
    /// ボタン名
    /// </summary>
    [Parameter]
    public string ButtonName { get; set; } = "ダウンロード";

    /// <summary>
    /// ダウンロードファイルはバイナリか否か
    /// </summary>
    [Parameter]
    public bool IsBinary { get; set; } = false;

    /// <summary>
    /// ダウンロードファイルの文字コードはShiftJisか否か
    /// </summary>
    [Parameter]
    public bool IsShiftJis { get; set; } = false;

    /// <summary>
    /// ダウンロードファイル設定
    /// </summary>
    [Parameter]
    public Func<Task<DownLoadModel>>? GetDataFunction { get; set; }

    /// <summary>
    /// ファイルダウンロード
    /// </summary>
    private async Task Download()
    {
        try
        {
            if (GetDataFunction is null)
                return;

            // ダウンロードファイル情報取得
            var model = await GetDataFunction();

            // エラーメッセージが設定されている場合はエラーメッセージ表示
            if (!string.IsNullOrEmpty(model.ErrorMessage))
            {
                await ShowAlert(model.ErrorMessage, OKClickFunction);
            }

            // ファイル名やデータが設定されていない場合は終了
            if (string.IsNullOrEmpty(model.FileName) || model.Data is null)
                return;


            // ダウンロードモードで処理分岐
            if (IsBinary)
            {
                await DownloadBinary(model);
            }
            else
            {
                await DownloadText(model);
            }
        }
        catch (Exception ex)
        {
            throw ex;
        }
    }

    /// <summary>
    /// テキスト出力
    /// </summary>
    /// <param name="model">出力対象</param>
    private async Task DownloadText(DownLoadModel model)
    {
        // ダウンロードの文字コードを指定(デフォルトはUTF8)
        var encoding = System.Text.Encoding.UTF8;
        if (IsShiftJis)
        {
            var provider = System.Text.CodePagesEncodingProvider.Instance;
            encoding = provider.GetEncoding(932);
        }

        // データ書き出しとファイル出力JSメソッド呼び出し
        using (var memoryStream = new MemoryStream())
        using (var writer = new StreamWriter(memoryStream, encoding!))
        {
            writer.WriteLine(model.Data);
            writer.Flush();
            memoryStream.Position = 0;

            using var streamRef = new DotNetStreamReference(memoryStream);
            await JS.InvokeVoidAsync("downloadFileFromStream", model!.FileName, streamRef);
        }
    }

    /// <summary>
    /// バイナリ出力
    /// </summary>
    /// <param name="model">出力対象</param>
    private async Task DownloadBinary(DownLoadModel model)
    {
        // データ書き出しとファイル出力JSメソッド呼び出し
        using (var memoryStream = new MemoryStream((byte[])model.Data!))
        {
            using var streamRef = new DotNetStreamReference(memoryStream);
            await JS.InvokeVoidAsync("downloadFileFromStream", model!.FileName, streamRef);
        }
    }
}