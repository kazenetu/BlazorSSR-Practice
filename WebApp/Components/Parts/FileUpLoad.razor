@namespace WebApp.Components.Parts
@using WebApp.Models.Parts
@inject IJSRuntime JS

<InputFile OnChange="ChangeFile" @ref="filePicker" style="display:none;" />
<div class="input-group mb-3">
    <span class="input-group-text" id="inputGroup-sizing-default">
        <button type="button" @onclick="() => OnFileInit()" class="btn btn-success btn-sm">ファイル選択</button>
    </span>
    <span class="form-control" aria-label="Sizing example input" aria-describedby="inputGroup-sizing-default">@FileName</span>
</div>

<script>
    window.triggerClick = (elt) => elt.click();
</script>

@code {
    /// <summary>
    /// チェック対象の拡張子
    /// </summary>
    /// <remarks>
    /// 省略時はCSV
    /// </remarks>
    [Parameter]
    public string Exiextension { get; set; } = "csv";

    /// <summary>
    /// 初期化時に呼び出すメソッド
    /// </summary>
    [Parameter]
    public EventCallback OnInit { get; set; }

    /// <summary>
    /// ファイル読み込み時に呼び出すメソッド
    /// </summary>
    [Parameter]
    public EventCallback<UpLoadeModel> OnLoad { get; set; }

    /// <summary>
    /// エラー時に呼び出すメソッド
    /// </summary>
    /// <param name="(string alertMsg, string logMsg)">表示エラーとログメッセージ</param>
    [Parameter]
    public EventCallback<(string alertMsg, string logMsg)> OnError { get; set; }

    /// <summary>
    /// 選択済みファイル名
    /// </summary>
    private string? FileName;

    /// <summary>
    /// ファイル指定コントロール
    /// </summary>
    private InputFile? filePicker;

    /// <summary>
    /// ファイル選択ボタンクリックイベント
    /// </summary>
    private async Task OnFileInit()
    {
        // 初期化メソッド呼び出し
        await OnInit.InvokeAsync();

        // ファイル名初期化
        FileName = string.Empty;

        // ファイル選択を開く
        await JS.InvokeAsync<object>("triggerClick", filePicker!.Element);
    }

    /// <summary>
    /// 受信ファイル変更イベント
    /// </summary>
    /// <param name="e">受信ファイル情報</param>
    private async Task ChangeFile(InputFileChangeEventArgs e)
    {
        // Model作成
        var fileModel = new UpLoadeModel(e.File);

        // 入力チェック：ファイルが存在しないか確認
        if (fileModel.IsNull)
        {
            await OnError.InvokeAsync(("ファイルを指定してください", "ファイル指定なし"));
            return;
        }

        // ファイル名がExiextensionか確認
        if (!fileModel.FileName.EndsWith($".{Exiextension}") || fileModel.FileName.Where(item=>item == '.').Count() != 1)
        {
            var exiextension = Exiextension.ToUpper();
            var errorFileName = fileModel.FileName;
            await OnError.InvokeAsync(($"下記のファイルは{exiextension}ファイルではありません。\r\n{errorFileName}\r\n{exiextension}ファイルを指定してください" ,
                                       $"{exiextension}ファイル以外 ファイル名={errorFileName}"));
            return;
        }

        //ファイル名格納
        FileName = fileModel.FileName;

        // メソッド呼び出し
        await OnLoad.InvokeAsync(fileModel);
    }
}