@namespace WebApp.Components.Parts
@using WebApp.Models.Parts
@using WebApp.Components.Providers
@inject IJSRuntime JS
@implements IAsyncDisposable

<button class="btn btn-primary" @onclick="Preview">@ButtonName</button>

<dialog id="PDFViewerDialog">
    @if (@IsPortrait)
    {
        <iframe id="iframe" style="height:80vh;width:55vw" />
    }
    else
    {
        <iframe id="iframe" style="height:55vh;width:80vw" />
    }
    <div style="text-align: center;">
        <button id="PDFViewerCloseButton" type="button" class="btn btn-outline-success btn-sm">
            閉じる
        </button>
    </div>
</dialog>

@code {
    #region ダイアログ表示
    /// <summary>
    /// アラートメッセージOKボタンクリック後のイベント
    /// </summary>
    [Parameter]
    public Func<Task>? OKClickFunction { get; set; }

    /// <summary>
    /// ダイアログプロバイダークラス
    /// </summary>
    [CascadingParameter]
    private DialogProvider? dialogProvider { get; set; }

    /// <summary>
    /// アラートメッセージ表示
    /// </summary>
    /// <param name="message">メッセージ本文</param>
    /// <param name="submitFunction">「OK」クリック時のコールバックメソッド</param>
    protected async Task ShowAlert(string message, Func<Task>? submitFunction = null)
    {
        if(dialogProvider is null)  return;

        await dialogProvider.ShowAlert(message, submitFunction);
    }
    #endregion

    /// <summary>
    /// ボタン名
    /// </summary>
    [Parameter]
    public string ButtonName { get; set; } = "ダウンロード";

    /// <summary>
    /// PDFは縦向きか？
    /// </summary>
    [Parameter]
    public bool IsPortrait { get; set; } = true;

    /// <summary>
    /// 新規ウィンドウ表示
    /// </summary>
    [Parameter]
    public bool IsNewWindow { get; set; } = false;

    /// <summary>
    /// ダウンロードファイル設定
    /// </summary>
    [Parameter]
    public Func<Task<DownLoadModel>>? GetDataFunction { get; set; }

    #region JSモジュール管理
    /// <summary>
    /// JSモジュール
    /// </summary>
    private IJSObjectReference? Module;

    /// <summary>
    /// 初期処理
    /// </summary>
    /// <param name="firstRender">初回表示か否か</param>
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // 専用JSファイルインポート設定
            Module = await JS.InvokeAsync<IJSObjectReference>("import", "./Components/Parts/PDFViewer.razor.js");
        }
    }

    /// <summary>
    /// JSモジュールの解放処理
    /// </summary>
    /// <remarks>ページ遷移時に呼び出される</remarks>
    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (Module is not null)
        {
            try
            {
                await Module.DisposeAsync();
            }
            catch (JSDisconnectedException e)
            {
                throw e;
            }
        }
    }
    #endregion

    /// <summary>
    /// PDFプレビュー
    /// </summary>
    private async Task Preview()
    {
        if (Module is null) return;

        try
        {
            if (GetDataFunction is null)
                return;

            // ダウンロードファイル情報取得
            var model = await GetDataFunction();

            // エラーメッセージが設定されている場合はエラーメッセージ表示
            if (!string.IsNullOrEmpty(model.ErrorMessage))
            {
                await ShowAlert(model.ErrorMessage, OKClickFunction);
            }

            // ファイル名やデータが設定されていない場合は終了
            if (string.IsNullOrEmpty(model.FileName) || model.Data is null)
                return;

            if (IsNewWindow)
            {
                // データ書き出しとファイル出力JSメソッド呼び出し
                await Module.InvokeVoidAsync("OpenPDFWindow", "iframe", model.Data, model.FileName, IsPortrait);
            }
            else
            {
                // JavaScript経由でPDF表示
                await Module.InvokeVoidAsync("setSource", "iframe", model.Data, model.FileName, IsPortrait);
            }
        }
        catch (Exception ex)
        {
            throw ex;
        }
    }
}