@if (TotalPages > 1)
{
    <style>
        .page-link {
            width: 3em;
        }

        .page-link:focus {
            box-shadow: var(--bs-pagination-focus-box-shadow);
            background-color: white;
        }
    </style>
    <nav aria-label="Page navigation">
        <ul class="pagination pagination-primary">

            @if (CurrentPageNumber > 1)
            {
                <li class="page-item">
                    <button type="button" class="page-link" @onclick="async () => await OnPageChangedAsync(1)">
                        <span aria-hidden="true">&laquo;</span>
                    </button>
                </li>
            }
            else
            {
                <li class="page-item disabled">
                    <button type="button" class="page-link">
                        <span aria-hidden="true">&laquo;</span>
                    </button>
                </li>
            }

            @if (StartPage != MaxPage)
            {
                @if (CurrentPageNumber > 1)
                {
                    <li class="page-item">
                        <button type="button" class="page-link"
                            @onclick="async () => await OnPageChangedAsync(CurrentPageNumber-1)">&lt;</button>
                    </li>
                }
                else
                {
                    <li class="page-item disabled">
                        <button type="button" class="page-link">&lt;</button>
                    </li>
                }

                @for (int i = GetStartPage(); i <= GetEndPage(); i++)
                {
                    int pageNumber = i;
                    string subClass = CurrentPageNumber == i ? "active" : string.Empty;
                    string disabledClass = CurrentPageNumber == i ? "disabled" : string.Empty;

                    <li class="page-item @subClass">
                        <button type="button" class="page-link"
                            @onclick="async () => await OnPageChangedAsync(pageNumber)">@i</button>
                    </li>
                }

                @if (CurrentPageNumber < TotalPages)
                {
                    <li class="page-item">
                        <button type="button" class="page-link"
                            @onclick="async () => await OnPageChangedAsync(CurrentPageNumber+1)">&gt;</button>
                    </li>
                }
                else
                {
                    <li class="page-item disabled">
                        <button type="button" class="page-link">&gt;</button>
                    </li>
                }
            }

            @if (CurrentPageNumber < TotalPages)
            {
                <li class="page-item">
                    <button class="page-link" @onclick="async () => await OnPageChangedAsync(TotalPages)">
                        <span aria-hidden="true">&raquo;</span>
                    </button>
                </li>
            }
            else
            {
                <li class="page-item disabled">
                    <button class="page-link">
                        <span aria-hidden="true">&raquo;</span>
                    </button>
                </li>
            }
        </ul>
    </nav>
    <div>@DisplayRecordCount()</div>
}

@code {
    /// <summary>
    /// ページアイコン数
    /// </summary>
    private const int MaxIPageCount = 5;

    /// <summary>
    ///　1ページに表示するレコード数
    /// </summary>
    [Parameter]
    public int RecordsPerPage { get; set; } = 20;

    /// <summary>
    /// 総レコード数
    /// </summary>
    [Parameter]
    public int TotalRecords { get; set; }

    /// <summary>
    /// ページ変更イベント(呼び出しページで定義)
    /// </summary>
    [Parameter]
    public EventCallback<int> PageChanged { get; set; }

    /// <summary>
    /// 選択中のページ
    /// </summary>
    private int CurrentPageNumber = 1;

    /// <summary>
    /// ページ変更イベント
    /// </summary>
    /// <param name="pageNumber">選択されたページ数</param>
    private async Task OnPageChangedAsync(int pageNumber)
    {
        // 呼び出し元のインデックスを取得
        await PageChanged.InvokeAsync(pageNumber);

        // 選択ページを変更
        CurrentPageNumber = pageNumber;
    }

    /// <summary>
    /// 最終ページ
    /// </summary>
    private int TotalPages
    {
        get
        {
            if (TotalRecords == 0 || RecordsPerPage == 0)
            {
                return 1;
            }

            // 総レコード数/1ページで算出した総ページ数を返す
            return (int)Math.Ceiling((double)TotalRecords / (double)RecordsPerPage);
        }
    }

    /// <summary>
    /// 開始ページ数
    /// </summary>
    public int StartPage
    {
        get
        {
            int startPage = CurrentPageNumber - 2;
            if (startPage < 1)
            {
                startPage = 1;
            }

            return startPage;
        }
    }

    /// <summary>
    /// 終了ページ数
    /// </summary>
    public int MaxPage
    {
        get
        {
            int maxPage = StartPage + 3;
            if (maxPage > TotalPages)
            {
                maxPage = TotalPages;
            }

            return maxPage;
        }
    }

    /// <summary>
    /// ページアイコン表示開始ページ数
    /// </summary>
    /// <remarks>ページアイコン描画時に使用</remarks>
    private int GetStartPage()
    {
        var startPageIndex = StartPage;
        var maxPageIndex = MaxPage;
        if (maxPageIndex - startPageIndex < MaxIPageCount)
        {
            startPageIndex = maxPageIndex - MaxIPageCount;
            if (startPageIndex <= 0) startPageIndex = 1;
        }
        return startPageIndex;
    }

    /// <summary>
    /// ページアイコン表示終了ページ数
    /// </summary>
    /// <remarks>ページアイコン描画時に使用</remarks>
    private int GetEndPage()
    {
        var endPageIndex = GetStartPage() + MaxIPageCount;
        if (endPageIndex > TotalPages)
        {
            endPageIndex = TotalPages;
        }
        return endPageIndex;
    }

    /// <summary>
    /// 表示中のレコード数、最大件数の文字列取得
    /// </summary>
    /// <returns>表示中のレコード数、最大件数</returns>
    private string DisplayRecordCount()
    {
        var startRecord = RecordsPerPage * (CurrentPageNumber - 1) + 1;
        var endRecord = startRecord + RecordsPerPage - 1;
        if (endRecord > TotalRecords)
        {
            endRecord = TotalRecords;
        }

        return $"全{TotalRecords:##,#}件中 {startRecord:##,#}～{endRecord:##,#}件を表示";
    }
}