@namespace WebApp.Components.Providers
@inject IJSRuntime JS
@implements IAsyncDisposable

<CascadingValue Value="this">
    @ChildContent
</CascadingValue>

@* Alertダイアログ　*@
<dialog id="alertDialog">
    <h2 id="alertMessage"></h2>
    <div style="text-align: center;">
        <button id="alertCloseButton" type="button" class="btn btn-outline-success btn-sm">
            閉じる
        </button>
        <button id="alertOKHiddenButton" @onclick="alertOK" style="display: none;" />
    </div>
</dialog>

@* Confirmダイアログ　*@
<dialog id="confirmDialog" style="min-width: 15em;">
    <h2 id="confirmMessage"></h2>
    <div class="row text-center">
        <div class="col">
            <button id="confirmCancelButton" type="button" class="btn btn-outline-success btn-sm">
                キャンセル
            </button>
        </div>
        <div class="col">
            <button id="confirmYesButton" type="button" class="btn btn-outline-success btn-sm">
                はい
            </button>
        </div>
        <button id="confirmYesHiddenButton" @onclick="ConfirmYes" style="display: none;" />
    </div>
</dialog>

@* 処理中ダイアログ *@
<dialog id="@ProcessingDialogName" style="width:30vw;">
    <div class="d-flex justify-content-center">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
    <div class="text-center">
        <h3>@ProcessingDialogText</h3>
    </div>
</dialog>

@code {
    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    /// <summary>
    /// 確認メッセージ用コールバックメソッド（呼び出し側のメソッド）
    /// </summary>
    private Func<Task>? SubmitFunction { get; set; }

    #region JSモジュール管理
    /// <summary>
    /// JSモジュール
    /// </summary>
    private IJSObjectReference? Module;

    /// <summary>
    /// 初期処理
    /// </summary>
    /// <param name="firstRender">初回表示か否か</param>
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // 専用JSファイルインポート設定
            Module = await JS.InvokeAsync<IJSObjectReference>("import", "./Components/Providers/DialogProvider.razor.js");
        }
    }

    /// <summary>
    /// JSモジュールの解放処理
    /// </summary>
    /// <remarks>ページ遷移時に呼び出される</remarks>
    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (Module is not null)
        {
            try
            {
                await Module.DisposeAsync();
            }
            catch (JSDisconnectedException e)
            {
                throw e;
            }
        }
    }
#endregion

    /// <summary>
    /// アラートメッセージ表示
    /// </summary>
    /// <param name="message">メッセージ本文</param>
    /// <param name="submitFunction">「はい」クリック時のコールバックメソッド（呼び出し側のメソッド）</param>
    public async Task ShowAlert(string message, Func<Task>? submitFunction)
    {
        if (Module is null) return;

        SubmitFunction = submitFunction;
        await Module.InvokeVoidAsync("showAlert", message);
    }

    /// <summary>
    /// アラートOKボタンクリックイベント
    /// </summary>
    private void alertOK()
    {
        // コールバックメソッド設定している場合は実行
        if (SubmitFunction is not null)
            SubmitFunction();
    }

    /// <summary>
    /// 確認メッセージ表示
    /// </summary>
    /// <param name="message">メッセージ本文</param>
    /// <param name="submitFunction">「はい」クリック時のコールバックメソッド（呼び出し側のメソッド）</param>
    public async Task ShowConfirm(string message, Func<Task> submitFunction)
    {
        if (Module is null) return;

        SubmitFunction = submitFunction;
        await Module.InvokeVoidAsync("showConfirm", message, "ConfirmResult");
    }

    /// <summary>
    /// 「はい」クリック時に発生するイベントメソッド
    /// </summary>
    private void ConfirmYes()
    {
        // コールバックメソッド設定している場合は実行
        if (SubmitFunction is not null)
            SubmitFunction();
    }

    /// <summary>
    /// 指定ダイアログ表示
    /// </summary>
    /// <param name="tagId">表示対象のid</param>
    public async Task ShowDialog(string tagId)
    {
        if (Module is null) return;

        await Module.InvokeVoidAsync("showDialog", tagId);
    }

    /// <summary>
    /// 指定ダイアログ非表示
    /// </summary>
    /// <param name="tagId">非表示対象のid</param>
    public async Task CloseDialog(string tagId)
    {
        if (Module is null) return;

        await Module.InvokeVoidAsync("closeDialog", tagId);
    }

    /// <summary>
    /// 処理中ダイアログ定数
    /// </summary>
    private const string ProcessingDialogName = "processingDialog";

    /// <summary>
    /// 処理中ダイアログ表示テキスト
    /// </summary>
    private string ProcessingDialogText = string.Empty;

    /// <summary>
    /// 処理中ダイアログ表示
    /// </summary>
    /// <param name="message">表示テキスト</param>
    public async Task ShowProcessingDialog(string message = "処理中")
    {
        ProcessingDialogText = message;
        await ShowDialog(ProcessingDialogName);
    }

    /// <summary>
    /// 処理中ダイアログ非表示
    /// </summary>
    public async Task CloseProcessingDialog()
    {
        await CloseDialog(ProcessingDialogName);
    }
}